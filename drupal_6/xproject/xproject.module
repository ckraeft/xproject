<?php

function xproject_init() {
    // We have to perform a load in order to assure that the ajax/javascript bits are present.
    
    drupal_add_css(drupal_get_path('module', 'xproject'). '/theme/xproject.css');
//    drupal_add_js(drupal_get_path('module', 'xproject'). '/js/xproject.js');
}

function xproject_help($path, $arg) {
  if ($path) {
    switch ($path) {
      case ($arg[2] == 'block' && $arg[4] == 'xproject'):
        return t('Project specific blocks help...');
        break;
      case 'admin/settings/xproject':
        return t('Configure the default behavior of projects and tasks for your site.');
        break;
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function xproject_perm() {
  return array('xproject administration', 'xproject access', 'activate xproject');
}

function xproject_access($op, $node, $account) {
    die('xproject_access');
}

function xproject_project_access($projectnode) {
    
    global $user;
    
    if(!$projectnode->private) {
        if(user_access('xproject administration')) return true;
    } else {
        if($projectnode->uid == $user->uid) return true;
    
/*    
        // get team...
        $teamlist = teamlist_getall_members($projectnode->nid);
        foreach($teamlist as $teaminfo) {
            if($teaminfo->uid == $user->uid) return true;
        }
*/
    }
    
    return false;
}

function xproject_mail_alter(&$message) {    
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
}

function xproject_convert_date2string($date_array, $format = 'storage') {
    if(is_array($date_array)) {
        switch($format) {
            case 'storage':
                return $date_array['year'].'-'.$date_array['month'].'-'.$date_array['day'].' 00:00:00';
                break;
            case 'display':
                return $date_array['year'].'-'.$date_array['month'].'-'.$date_array['day'];
                break;
        }
    } else {
        return $date_array;
    }
}

function xproject_convert_date2array($date) {
    if(!is_string($date)) return $date;
    list($date_part, $time_part) = explode(' ', $date);
    list($year_part, $month_part, $day_part) = explode('-', $date_part);
    list($hour_part, $min_part, $sec_part) = explode(':', $time_part);
    $return_array = array('year' => (int)$year_part, 'month' => (int)$month_part, 'day' => (int)$day_part);
    return $return_array;
}

/**
 * Implementation of hook_menu().
 */
function xproject_menu() {
    $items['admin/settings/xproject'] = array(
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('xproject_admin_settings'),
        'access arguments' => array('xproject administration'),
        'file' => 'xproject.admin.inc',
        'file path' => drupal_get_path('module', 'xproject'). '/includes',
        'title' => 'xProject Settings'
    );
    $items['admin/content/xproject'] = array(
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'xproject_report',
        'access arguments' => array('xproject administration'),
        'file' => 'xproject.admin.inc',
        'file path' => drupal_get_path('module', 'xproject'). '/includes',
        'title' => 'xProject Report'
    );
    $items['admin/content/xproject/templates'] = array(
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'xproject_template_projects',
        'access arguments' => array('xproject administration'),
        'file' => 'xproject.admin.inc',
        'file path' => drupal_get_path('module', 'xproject'). '/includes',
        'title' => 'xProject Templates'
    );
    
	$items['node/%xproject_node/addtask'] = array(
    	'title' => 'Add Task',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1),
        'access arguments' => array('xproject access'),
    );
    
	$items['node/%xproject_node/activate'] = array(
    	'title' => 'Activate',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'xproject_activate_project',
        'page arguments' => array(1),
        'access arguments' => array('activate xproject'),
    );
    
	$items['node/%xproject_node/hold'] = array(
    	'title' => 'Hold',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'xproject_hold_project',
        'page arguments' => array(1),
        'access arguments' => array('activate xproject'),
    );
    
	$items['node/%xproject_node/reactivate'] = array(
    	'title' => 'Re-activate',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'xproject_reactivate_project',
        'page arguments' => array(1),
        'access arguments' => array('activate xproject'),
    );
    
	$items['node/%xproject_node/complete'] = array(
    	'title' => 'Complete',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'xproject_complete_project',
        'page arguments' => array(1),
        'access arguments' => array('activate xproject'),
    );
    
	$items['node/%xproject_node/archive'] = array(
    	'title' => 'Archive',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'xproject_archive_project',
        'page arguments' => array(1),
        'access arguments' => array('activate xproject'),
    );
    $items['node/%xproject_node/decr_importance'] = array(
		'page callback' => 'xproject_importance_decr',
        'page arguments' => array(1),
        'access arguments' => array('activate xproject'),
		'title' =>'Increment Project Importance',
		'type' => MENU_CALLBACK,
	);
    $items['node/%xproject_node/incr_importance'] = array(
		'page callback' => 'xproject_importance_incr',
        'page arguments' => array(1),
        'access arguments' => array('activate xproject'),
		'title' =>'Increment Project Importance',
		'type' => MENU_CALLBACK,
	);
    $items['node/%xproject_node/decr_priority'] = array(
		'page callback' => 'xproject_priority_decr',
        'page arguments' => array(1),
        'access arguments' => array('activate xproject'),
		'title' =>'Increment Project Priority',
		'type' => MENU_CALLBACK,
	);
    $items['node/%xproject_node/incr_priority'] = array(
		'page callback' => 'xproject_priority_incr',
        'page arguments' => array(1),
        'access arguments' => array('activate xproject'),
		'title' =>'Increment Project Priority',
		'type' => MENU_CALLBACK,
	);
    
	$items['node/%xproject_node/variance'] = array(
    	'title' => 'Variance Report',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'xproject_variance_report',
        'page arguments' => array(1),
        'access arguments' => array('xtask access'),
    );
    
	$items['node/%xproject_node/spreadsheet'] = array(
    	'title' => 'Spreadsheet',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'xproject_spreadsheet_project',
        'page arguments' => array(1),
        'access arguments' => array('xproject administration'),
    );
    
	$items['xproject/template/%xproject_node/remove'] = array(
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'xproject_template_remove',
        'page arguments' => array(2),
        'access arguments' => array('xproject administration'),
        'file' => 'xproject.admin.inc',
        'file path' => drupal_get_path('module', 'xproject'). '/includes',
    );

    
    return $items;
}



function xproject_node_load($nid) {
	if (is_numeric($nid) && module_exists('xtasks')) {
		$node = node_load($nid);
        if (xproject_is_xproject($node->type)) {
            return $node;
        }
    }
	return false;
}


function xproject_preprocess_node(&$variables) {
    $node = $variables['node'];
    if (xproject_is_xproject($node->type)) {
        array_unshift($variables['template_files'], 'node-xproject');
    }
}

function xproject_theme_registry_alter(&$variables) {
  // Check for xproject provided templates just before we use the default node.tpl.php
  array_splice($variables['node']['theme paths'], 1, 0, drupal_get_path('module', 'xproject'). '/theme');
}

function xproject_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
    global $user;

    if(xproject_is_xproject($node->type) == true) {
    	$data = array();
        switch ($op) {
            case 'view':
                // add buttons for status workflow process
                switch($node->projectstatus) {
                    case 'Draft':
                        // Draft: allow "activation" to set as "Pending" and "archive" to close it
                    
                        if(xproject_project_access($node)) {
                            $node->activate_project_button = l(t('Submit Project'), 'node/'.$node->nid.'/activate');
                            $node->archive_project_button = l(t('Archive Project'), 'node/'.$node->nid.'/archive');
                        }
                    
                        break;
                    
                    case 'Pending':
                        // Pending: allow "activation" to set as "Active" and "archive" to close it
                    
                        if(xproject_project_access($node)) {
                            $node->activate_project_button = l(t('Approve Project'), 'node/'.$node->nid.'/activate');
                            $node->archive_project_button = l(t('Archive Project'), 'node/'.$node->nid.'/archive');
                        }
                    
                        break;
                    case 'Active':
                        // Active: allow to put "On Hold", "Completed"
                        if(xproject_project_access($node)) {
                            $node->hold_project_button = l(t('Hold Project'), 'node/'.$node->nid.'/hold');
                            $node->complete_project_button = l(t('Complete Project'), 'node/'.$node->nid.'/complete');
                        }
                    
                        break;
                    case 'On Hold':
                        // On Hold: allow to re-activate, must re-activate before any other status change?
                        if(xproject_project_access($node)) {
                            $node->reactivate_project_button = l(t('Re-Activate Project'), 'node/'.$node->nid.'/reactivate');
                        }
                    
                        break;
                    case 'Completed':
                        // Completed: allow to "Archive"
                        if(xproject_project_access($node)) {
                            $node->archive_project_button = l(t('Archive Project'), 'node/'.$node->nid.'/archive');
                        }
                    
                        break;
                    case 'Archived':
                        // Archived: no option to re-activate except by admin via dropdown
                    
                        break;
                    case 'Baseline':
                        // Baseline: stuck at baseline?
                    
                        break;
                }
                /*
                // if a draft or pending project, include a button to activate the project, triggering activation of initial tasks
                if(xproject_project_access($node) && $node->projectstatus != 'Active') {
                    $node->activate_project_button = '<a href="">Activate Project</a>';
                }

                // if project is active, include a button to archive it.
                if(xproject_project_access($node) && $node->projectstatus != 'Archived') {
                    $node->archive_project_button = l(t('Archive Project'), 'node/'.$node->nid.'/archive');
                }
                */
                $node->content['project'] = array(
                  '#node' => $node,
                  '#weight' => -3,
                  '#value' => theme('xproject', $node),
                );
                
                    
//                print_r($node);
                break;
            case 'load':
                $result = db_query('SELECT * FROM xproject WHERE nid = '.$node->nid);
                if($row = db_fetch_array($result)) {
                    $row['date_approved'] = $row['date_approved'] != '0000-00-00 00:00:00' ? $row['date_approved'] : NULL;
//                    $row['planned_start_date'] = xproject_convert_date2array($row['planned_start_date']);
                    $row['planned_start_date'] = $row['planned_start_date'] != '0000-00-00 00:00:00' ? $row['planned_start_date'] : NULL;
                    $row['planned_end_date'] = $row['planned_end_date'] != '0000-00-00 00:00:00' ? $row['planned_end_date'] : NULL;
                    $row['actual_start_date'] = $row['actual_start_date'] != '0000-00-00 00:00:00' ? $row['actual_start_date'] : NULL;
                    $row['actual_end_date'] = $row['actual_end_date'] != '0000-00-00 00:00:00' ? $row['actual_end_date'] : NULL;
                    $row['hours_per_day'] = $row['hours_per_day'] ? $row['hours_per_day'] : variable_get('xproject_hours_per_day', 8);
//print_r($row);
                    return $row;
                }
                break;
            case 'validate':
                break;
            case 'presave':
                break;
            case 'delete':
				$success = xproject_delete_project($node->nid);
				if(!$success)
					drupal_set_message('Error deleting xproject','error');
                break;
            case 'insert':
                // check for a project templateid and copy team and tasks if found
                if($node->tpl_projectid) {
                
                    $tpl_project = node_load($node->tpl_projectid);
                    
                    $node->type = $tpl_project->type;
                    node_save($node);

                    if($node->planned_start_date != '0000-00-00 00:00:00' && $tpl_project->planned_start_date != '0000-00-00 00:00:00') {
                        $delta_time = strtotime($node->planned_start_date) - strtotime($tpl_project->planned_start_date);
                    } else {
                        $delta_time = 0;
                    }
                    
//                    $template_project = node_load($node->tpl_projectid);
                    $sql = "SELECT * FROM xproject_team WHERE projectid = %d";
                    $result = db_query($sql, $node->tpl_projectid);
                    while($row = db_fetch_array($result)) {
//                        $sql2 = "INSERT INTO xproject_team (projectid, contactid, department_head) VALUES (%d, %d, %d)";
//                        $result2 = db_query($sql2, $node->nid, $row['contactid'], $row['department_head']);
                        $row['projectid'] = $node->nid;
    		            drupal_write_record('xproject_team', $row);
                    }
                    
                    $sql = "SELECT taskid, xprojectid, tpl_taskid, parent_taskid, dependency_taskid, offset_days, owner, assigned_to, assigned_by,
                                taskname, tasktype, taskdetails, taskstatus, taskimportance, taskpriority, taskprivate,
                                hours_planned, hours_spent, hours_remaining,
                                planned_start_date, planned_end_date, actual_start_date, actual_end_date 
                            FROM xtasks WHERE xprojectid = %d
                            ORDER BY parent_taskid, dependency_taskid";
                    $result = db_query($sql, $node->tpl_projectid);
                    $taskindex = array();

                    while($row = db_fetch_array($result)) {
                    
                        $row['date_approved'] = '0000-00-00 00:00:00';
                        $row['actual_start_date'] = '0000-00-00 00:00:00';
                        $row['actual_end_date'] = '0000-00-00 00:00:00';

                        if($row['planned_start_date'] != '0000-00-00 00:00:00') {
                            $row['planned_start_date'] = date('Y-m-d', strtotime($row['planned_start_date']) + $delta_time);
                        }
                        if($row['planned_end_date'] != '0000-00-00 00:00:00') {
                            $row['planned_end_date'] = date('Y-m-d', strtotime($row['planned_end_date']) + $delta_time);
                        }

                        $row['hours_spent'] = 0;
                        $row['hours_remaining'] = $row['hours_planned'];
                        
                        // get new parent task and set it: sql to select as tpl_taskid + new projectid
                        if($row['parent_taskid']) {
                            $row['parent_taskid'] = $taskindex[$row['parent_taskid']];
                        }

                        // get new dependency task and set it: sql to select as tpl_taskid + new projectid
                        if($row['dependency_taskid']) {
                            $row['dependency_taskid'] = $taskindex[$row['dependency_taskid']];
                        }

                        $sql2 = "INSERT INTO xtasks (xprojectid, tpl_taskid, parent_taskid, dependency_taskid, offset_days, owner, assigned_to, assigned_by,
                                    taskname, tasktype, taskdetails, taskstatus, taskimportance, taskpriority, taskprivate,
                                    hours_planned, hours_spent, hours_remaining,
                                    planned_start_date, planned_end_date, actual_start_date, actual_end_date, warning_lead) 
                                 VALUES (%d, %d, %d, %d,  %d, %d, %d, %d, 
                                        '%s', '%s', '%s', '%s', %d, %d, %d, 
                                        %d, %d, %d, 
                                        '%s', '%s', '%s', '%s')";

                        db_query($sql2, $node->nid, $row['taskid'], $row['parent_taskid'], $row['dependency_taskid'], $row['offset_days'], $row['owner'], $row['assigned_to'], $row['assigned_by'],
                                                $row['taskname'], $row['tasktype'], $row['taskdetails'], $row['taskstatus'], $row['taskimportance'], $row['taskpriority'], $row['taskprivate'],
                                                $row['hours_planned'], $row['hours_spent'], $row['hours_remaining'],
                                                $row['planned_start_date'], $row['planned_end_date'], $row['actual_start_date'], $row['actual_end_date'], $row['warning_lead']);


                        // new taskid is what...?
                        $newtaskid = db_last_insert_id('xtasks', 'taskid');
                        $taskindex[$row['taskid']] = $newtaskid;


                    }
                }
                // continue through to update?
            case 'update':
                // will check for nid, so same code for both insert and update
                
                // drupal_write_record fails on fields with array values, so convert the dates:
//                print_r($node);

                if($node->planned_start_date == false) $node->planned_start_date = '0000-00-00 00:00:00';
                if($node->planned_end_date == false) $node->planned_end_date = '0000-00-00 00:00:00';
                if($node->actual_start_date == false) $node->actual_start_date = '0000-00-00 00:00:00';
                if($node->actual_end_date == false) $node->actual_end_date = '0000-00-00 00:00:00';
                if($node->date_approved == false) $node->date_approved = '0000-00-00 00:00:00';

                $now = time();
                // if planned start date is in the past and actual start date has not been set, change it? otherwise, planned start date would be in the future, right?
                if(!empty($node->planned_start_date)) {
                    $planned_start_date = strtotime($node->planned_start_date);
                    if($node->actual_start_date == false && $planned_start_date <= $now) {
                        $node->actual_start_date = $node->planned_start_date;  
                    }
                }

                // if planned end date is in the past and actual end date has not been set, change it? otherwise, planned end date would be in the future, right?
                if(!empty($node->planned_end_date)) {
                    $planned_end_date = strtotime($node->planned_end_date);
                    if($node->actual_end_date == false && $planned_end_date <= $now) {
                        $node->actual_end_date = $node->planned_end_date;  
                    }
                }

                $data = xproject_get_project($node->nid);
                if(isset($data['nid'])) {
			        drupal_write_record('xproject', $node,'nid');
                } else {
                    // xproject record not yet created, do so now (ex: content item after xprojects turned on for that node type)
    			    drupal_write_record('xproject', $node);
                }
                
                xtasks_update_child_tasks($node->nid, 0, $node->planned_start_date, $node->planned_end_date);
                
                break;
            case 'search result':
                break;
            case 'rss item':
                break;
        }
	}
}

function xproject_activate_project($node) {

    // if approval required and status is draft, set to pending and notify team members
    // if status is already pending, then set approval date and status to Active
    if($node->approve_project_to_start) {
         
        if($node->projectstatus == 'Draft') {
    
            // validate!!
            $problems = _xproject_validate_xtasks($node->nid, 0);
            if($problems > 0) {
                drupal_goto($node->path);
                return true;
            }
            
            $node->projectstatus = 'Pending';
            
            // notify project team or owner that it is available for review/approval
            
        } elseif($node->projectstatus == 'Pending') { 
        
            // validate!!
            $problems = _xproject_validate_subtasks($node->nid, 0);
            if($problems > 0) {
                drupal_goto($node->path);
                return true;
            }
            

            // need to create baseline project
            $xprojectid = $node->nid; // $node gets overwritten by node_save, use to rebuild...
            $baseline_project = $node;
            $baseline_project->nid = 0;
            $baseline_project->vid = 0;
            $baseline_project->title = 'Baseline: '.$baseline_project->title;
            $baseline_project->projectstatus = 'Baseline';
            node_save($baseline_project);
            
            $node = node_load($xprojectid);
            $node->projectstatus = 'Active';
            $node->baseline_projectid = $baseline_project->nid;
            
            // send out notification emails!!!
            
            // now copy all tasks... must do it by hierarchical level to preserve parent/dependent task id's...
            // run a recursive function to do this...
            // * get child tasks
            // * copy 
            _xproject_copy_subtasks($node->nid, $baseline_project->nid);
                
            // tasks get activated later, below...
            
        }
    } else {
        $node->projectstatus = 'Active';
    }
    
    if($node->projectstatus == 'Active') {
        // - auto-activate (submitted) non-dependent top-level tasks when project is made active
        // need to also activate subtasks... write an activate_task function that cascades through subs?
        
        $tasklist = xtasks_get_tasklist($node->nid, 0, false);
        $dateapproved = time();
        foreach($tasklist as $taskinfo) {
            if($taskinfo['taskstatus'] == 'Pending'
                && $taskinfo['dependency_taskid'] == 0
                && $dateapproved > strtotime($taskinfo['planned_start_date'])) {
                
                xtasks_activate_task($taskinfo['taskid']);
            }
        }
             
//        $result = db_query("UPDATE {xtasks} SET taskstatus = 'Active' WHERE xprojectid = %d", $node->nid);
    }
    
    node_save($node);
    drupal_goto($node->path);
    return true;
}

function _xproject_validate_subtasks($xprojectid, $parent_taskid = 0) {
    $problems = 0;
    $tasklist = xtasks_get_tasklist($xprojectid, $parent_taskid, false);
    $dateapproved = time();
    foreach($tasklist as $taskinfo) {
        if($taskinfo['duration'] == false && $taskinfo['tasktype'] != 'Milestone') {
            $problems++;;
            drupal_set_message(t('Duration must be entered for all non-Milestone tasks before activating the project!'));
        }
        
        if($taskinfo['taskstatus'] != 'Pending') {
            $problems++;;
            drupal_set_message(t('All tasks must be Pending status, ready to start, before activating the project!'));
        }
        
        $problems = $problems + _xproject_validate_subtasks($xprojectid, $taskinfo['taskid']);
    }
    return $problems;
}

function _xproject_copy_subtasks($xprojectid, $baseline_projectid, $parent_taskid = 0, $baseline_parent_taskid = 0) {
    
    $tasklist = xtasks_get_tasklist($xprojectid, $parent_taskid, false);
    foreach($tasklist as $taskinfo) {
        // copy task as a baseline, tasks stay pending status
        
        // extrapolate dates from task durations
        // account for dependency_taskid transpositions
        // use critical path function?
        
        $origtask = $taskinfo;
        $taskinfo['xprojectid'] = $baseline_projectid;
        $taskinfo['baseline_taskid'] = $taskinfo['taskid'];
        $taskinfo['taskid'] = 0;
        $taskinfo['parent_taskid'] = $baseline_parent_taskid;
        drupal_write_record('xtasks', $taskinfo);
        
        // set original task baseline taskid and save
        $origtask['baseline_taskid'] = $taskinfo['taskid'];
        drupal_write_record('xtasks', $origtask, 'taskid');
        
        _xproject_copy_subtasks($xprojectid, $baseline_projectid, $origtask['taskid'], $taskinfo['taskid']);
    }

}

function xproject_hold_project($node) {
    // put all active tasks in pending state?
    
    $tasklist = xtasks_get_tasklist($node->nid, 0, false);
    $dateapproved = time();
    foreach($tasklist as $taskinfo) {
        if($taskinfo['taskstatus'] == 'Pending'
            && $taskinfo['dependency_taskid'] == 0
            && $dateapproved > strtotime($taskinfo['planned_start_date'])) {
            
//            xtasks_activate_task($taskinfo['taskid']);
        }
    }
    
//    $result = db_query("UPDATE {xtasks} SET taskstatus = 'On Hold' WHERE xprojectid = %d", $node->nid);
    $node->projectstatus = 'On Hold';
    node_save($node);
    drupal_goto($node->path);
    return true;
}

function xproject_reactivate_project($node) {
    // - auto-activate (submitted) non-dependent top-level tasks when project is made active
    // need to also activate subtasks... write an activate_task function that cascades through subs?
    
    $tasklist = xtasks_get_tasklist($node->nid, 0, false);
    $dateapproved = time();
    foreach($tasklist as $taskinfo) {
        if($taskinfo['taskstatus'] == 'Pending'
            && $taskinfo['dependency_taskid'] == 0
            && $dateapproved > strtotime($taskinfo['planned_start_date'])) {
            
//            xtasks_activate_task($taskinfo['taskid']);
        }
    }
    
//    $result = db_query("UPDATE {xtasks} SET taskstatus = 'Active' WHERE xprojectid = %d", $node->nid);
    $node->projectstatus = 'Active';
    node_save($node);
    drupal_goto($node->path);
    return true;
}

function xproject_complete_project($node) {
    // - auto-activate (submitted) non-dependent top-level tasks when project is made active
    // need to also activate subtasks... write an activate_task function that cascades through subs?
    
    $tasklist = xtasks_get_tasklist($node->nid, 0, false);
    $dateapproved = time();
    foreach($tasklist as $taskinfo) {
        if($taskinfo['taskstatus'] == 'Pending'
            && $taskinfo['dependency_taskid'] == 0
            && $dateapproved > strtotime($taskinfo['planned_start_date'])) {
            
//            xtasks_activate_task($taskinfo['taskid']);
        }
    }
    
//    $result = db_query("UPDATE {xtasks} SET taskstatus = 'Completed' WHERE xprojectid = %d", $node->nid);
    $node->projectstatus = 'Completed';
    node_save($node);
    drupal_goto($node->path);
    return true;
}

function xproject_archive_project($node) {
    // - auto-activate (submitted) non-dependent top-level tasks when project is made active
    // need to also activate subtasks... write an activate_task function that cascades through subs?
    
    $result = db_query("UPDATE {xtasks} SET taskstatus = 'Archived' WHERE xprojectid = %d", $node->nid);
    $node->projectstatus = 'Archived';
    node_save($node);
    drupal_goto($node->path);
    return true;
}

function xproject_project_form($node, $form_state) {
    global $user;
    
    $form = array();
    
    if(xproject_is_xproject($node->type) == false) {
        return $form;
    }
    
    // Set the default values for a new item. By using += rather than =, we
    // only overwrite array keys that have not yet been set. It's safe to use
    // on both an empty array, and an incoming array with full or partial data.
    $node = (array)$node;
    $node += array(
        'nid' => NULL,
    );
    $node = (object)$node;
//    print_r($node);
    // BEGIN BUILDING PROJECT FORM HERE. TITLE AND DESCRIPTION ARE HANDLED BY THE NODE ALREADY
    if($node->nid == false && $tpl_projectid == true && false) {
        $node = node_load($tpl_projectid);
        $node->nid = NULL;
    }
    
    
	if(!$node->nid) {
        $node->enable_team = variable_set('xproject_enable_team',true);
        $node->track_dates = variable_set('xproject_track_dates',true);
        $node->hours_per_day = variable_set('xproject_hours_per_day',8);
        $node->work_weekends = variable_set('xproject_work_weekends',false);
        $node->approve_project_to_start = variable_set('xproject_approve_project_to_start',false);
        $node->track_hours = variable_set('xproject_track_hours', true);
        $node->show_hours_or_days = variable_set('xproject_show_hours_or_days','Hours');
        $node->approve_tasks_to_close = variable_set('xproject_approve_tasks_to_close',false);
    }
    
	$form['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
    
    $xproject_default_status_workflow = variable_get('xproject_default_use_baselines', 0);
	if(user_access('xproject administration') || $xproject_default_status_workflow == false) {
        $form['projectstatus'] = array(
            '#type' => 'select', 
            '#title' => t('Status'), 
            '#default_value' => isset($node->projectstatus) ? $node->projectstatus : variable_get('xproject_default_projectstatus', 'Active'), 
            '#options' => array(
                'Draft' => t('Draft'), 
                'Pending' => t('Pending'), 
                'Active' => t('Active'),
                'On Hold' => t('On Hold'),
                'Completed' => t('Completed'),
                'Archived' => t('Archived'),
                'Baseline' => t('Baseline'),
            ), 
            '#description' => t('Status of project'),
            '#prefix' => '<div class="project-field-row">',
            );
    }
    
	$form['importance'] = array(
        '#type' => 'select', 
        '#title' => t('Importance'), 
        '#default_value' => isset($node->importance) ? $node->importance : variable_get('xproject_default_importance', 5), 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Overall level of project importance'),
        );
	$form['priority'] = array(
        '#type' => 'select', 
        '#title' => t('Priority'), 
        '#default_value' => isset($node->priority) ? $node->priority : variable_get('xproject_default_priority', 5), 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Current priority of the project'),
        '#suffix' => '</div><div class="clear"></div>',
        );
        
    if($node->track_hours || $node->nid == false) {
        $form['project_hours'] = array(
            '#type' => 'fieldset',
            '#title' => t('Project Progress (hours)'),
            '#collapsible' => true,
            '#collapsed' => true,
        );
    	$form['project_hours']['hours_planned'] = array(
    		'#type' => 'textfield', 
    		'#title' => t('Hours Planned'), 
    		'#default_value' =>$node->hours_planned, 
    		'#size' =>6 , 
    		'#maxlength' => 16,
            '#prefix' => '<div class="project-field-row">', );
    	$form['project_hours']['hours_spent'] = array(
    		'#type' => 'textfield', 
    		'#title' => t('Hours Spent'), 
    		'#default_value' =>$node->hours_spent, 
    		'#size' =>6 , 
    		'#maxlength' => 16, );
    	$form['project_hours']['hours_remaining'] = array(
    		'#type' => 'textfield', 
    		'#title' => t('Hours Remaining'), 
    		'#default_value' =>$node->hours_remaining, 
    		'#size' =>6 , 
    		'#maxlength' => 16,
            '#suffix' => '</div><div class="clear"></div>', );
    
    	
        
    	if($node->show_hours_or_days == 'Days') {
    	    $form['project_hours']['#title'] = t('Project Progress (days)');
    	    $form['project_hours']['hours_planned']['#title'] = t('Days Planned');
    	    $form['project_hours']['hours_planned']['#value'] = $node->hours_planned / $node->hours_per_day;
    	    $form['project_hours']['hours_spent']['#title'] = t('Days Spent');
    	    $form['project_hours']['hours_spent']['#value'] = $node->hours_spent / $node->hours_per_day;
    	    $form['project_hours']['hours_remaining']['#title'] = t('Days Remaining');
    	    $form['project_hours']['hours_remaining']['#value'] = $node->hours_remaining / $node->hours_per_day;
        }
    }
    
    $form['project_dates'] = array(
        '#type' => 'fieldset',
        '#title' => t('Project Dates'),
        '#collapsible' => true,
        '#collapsed' => true,
    );
    
    $format = 'Y-m-d';
    

    if($node->approve_project_to_start) {
    	$form['project_dates']['date_approved'] = array(
    		'#type' => 'date_select', 
    		'#title' => 'Date approved', 
    		'#default_value' => $node->date_approved ? $node->date_approved : NULL, 
    		'#description' => '',
            '#required' => false,
            '#date_timezone' => date_default_timezone_name(),
            '#date_year_range' => '-3:+3',
            '#date_increment' => 15,
            '#date_format' => $format,
            '#date_label_position' => 'within',
        );
    }
	$form['project_dates']['planned_start_date'] = array(
		'#type' => 'date_select', 
		'#title' => 'Planned start date', 
		'#default_value' => $node->planned_start_date ? $node->planned_start_date : NULL, 
		'#description' => '',
        '#required' => false,
        '#date_timezone' => date_default_timezone_name(),
        '#date_year_range' => '-3:+3',
        '#date_increment' => 15,
        '#date_format' => $format,
        '#date_label_position' => 'within',
        '#prefix' => '<div class="project-field-row">', );
//print_r($node);
	$form['project_dates']['planned_end_date'] = array(
		'#type' => 'date_select', 
		'#title' => 'Planned end date', 
		'#default_value' => $node->planned_end_date ? $node->planned_end_date : NULL, 
		'#description' => '',
        '#required' => false,
        '#date_timezone' => date_default_timezone_name(),
        '#date_year_range' => '-3:+3',
        '#date_increment' => 15,
        '#date_format' => $format,
        '#date_label_position' => 'within',
        '#suffix' => '</div><div class="clear"></div>', );
    
	if($node->track_dates) {
        
        $form['project_dates']['actual_start_date'] = array(
    		'#type' => 'date_select', 
    		'#title' => 'Actual start date', 
    		'#default_value' => $node->actual_start_date, 
    		'#description' => '',
            '#required' => false,
            '#date_timezone' => date_default_timezone_name(),
            '#date_year_range' => '-3:+3',
            '#date_increment' => 15,
            '#date_format' => $format,
            '#date_label_position' => 'within',
            '#prefix' => '<div class="project-field-row">', );
    	$form['project_dates']['actual_end_date'] = array(
    		'#type' => 'date_select', 
    		'#title' => 'Actual end date', 
    		'#default_value' => $node->actual_end_date, 
    		'#description' => '',
            '#required' => false,
            '#date_timezone' => date_default_timezone_name(),
            '#date_year_range' => '-3:+3',
            '#date_increment' => 15,
            '#date_format' => $format,
            '#date_label_position' => 'within',
            '#suffix' => '</div><div class="clear"></div>', );
    }
         
    $form['project_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Project Settings'),
        '#collapsible' => true,
        '#collapsed' => true,
    );
        
	$form['project_settings']['is_template'] = array(
		'#type' =>'checkbox', 
		'#title' => t('Is template'),
        '#default_value' => $node->is_template,
        '#description' => t('A template project is used to create new projects with pre-populated task lists.'),
    );
    if($node->tpl_projectid) {
        $template_project = node_load($node->tpl_projectid);
        
    	$form['project_settings']['tpl_projectid'] = array(
    		'#type' =>'item', 
    		'#title' => t('Template Project'),
            '#default_value' => $template_project->title,
            '#description' => t('The project this one was created from.'),
        );
    }
    
	$form['project_settings']['private'] = array(
		'#type' =>'checkbox', 
		'#title' => t('Private'),
		'#default_value' => $node->private,
        '#description' => t('Public projects may be viewed by non-team members. Team members may not view tasks in private projects that they are not assigned to.'),
        );
        
    $form['project_settings']['enable_team'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Enable Project Team'), 
		'#default_value' => isset($node->enable_team) ? $node->enable_team : variable_get('xproject_enable_team', true), 
        '#description' => t('Enable multiple contacts to participate in the project and be assigned tasks.'),
    );
    $form['project_settings']['track_dates'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Track Dates'), 
		'#default_value' => isset($node->track_dates) ? $node->track_dates : variable_get('xproject_track_dates', true), 
        '#description' => t('Record planned and actual dates.'),
    );
    $form['project_settings']['work_weekends'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Work Weekends'), 
		'#default_value' => isset($node->work_weekends) ? $node->work_weekends : variable_get('xproject_work_weekends', true), 
        '#description' => t('Record planned and actual dates.'),
    );
    $form['project_settings']['approve_project_to_start'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Approve Project to Start'), 
		'#default_value' => isset($node->approve_project_to_start) ? $node->approve_project_to_start : variable_get('xproject_approve_project_to_start', true), 
        '#description' => t('Require project to be "approved" in order to set actual start date and make tasks active.'),
    );
    $form['project_settings']['warning_lead'] = array(
        '#type' => 'textfield', 
        '#title' => t('Warning Lead'), 
		'#default_value' => isset($node->warning_lead) ? $node->warning_lead : variable_get('xproject_warning_lead', 0), 
        '#description' => t('Days before planned end date that a task will trigger a warning status.'),
        '#size' => 2,
    );
    $form['project_settings']['track_hours'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Track Hours'), 
		'#default_value' => isset($node->track_hours) ? $node->track_hours : variable_get('xproject_track_hours', true), 
        '#description' => t('Record hours planned, spent and remaining.'),
    );
    $form['project_settings']['show_hours_or_days'] = array(
        '#type' => 'select', 
        '#title' => t('Show Hours or Days'), 
		'#default_value' => isset($node->show_hours_or_days) ? $node->show_hours_or_days : variable_get('xproject_show_hours_or_days', 'Hours'), 
        '#options' => array(
            'Hours' => 'Hours',
            'Days' => 'Days',
        ),
        '#description' => t('Display hours or round into days for worklogs, task hours and project hours.'),
    );
    $form['project_settings']['hours_per_day'] = array(
        '#type' => 'textfield', 
        '#title' => t('Work Hours per Day'),
        '#default_value' => isset($node->hours_per_day) ? $node->hours_per_day : variable_get('xproject_hours_per_day', 8), 
        '#description' => t('Total working hours per day.'),
    );
    $form['project_settings']['approve_tasks_to_close'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Approve Tasks to Close'), 
		'#default_value' => isset($node->approve_tasks_to_close) ? $node->approve_tasks_to_close : variable_get('xproject_approve_tasks_to_close', true), 
        '#description' => t('Require tasks to be approved by their creator before they can be closed.'),
    );
    
    return $form;
}

function xproject_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'node_type_form') {
        $form['xproject'] = array(
          '#type' => 'fieldset',
          '#title' => t('xProject'),
          '#group' => 'additional_settings',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#weight' => 35,
        );
        $form['xproject']['xproject_use'] = array(
          '#type' => 'checkbox',
          '#title' => t('Use this content type as a project'),
          '#default_value' => variable_get('xproject_use_'. $form['#node_type']->type, FALSE),
        );
    } elseif (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
        $node = $form['#node'];
//print_r($form);
        if (xproject_is_xproject($node->type)) {

            $form = array_merge($form, xproject_project_form($node, $form_state));
            // Don't trample on custom label.
			 if (isset($form['title']) && $form['title']['#title'] == t('Title'))
			 {
				$form['title']['#title'] = t('Project Name');
			 }
            if (isset($form['body_field']) && $form['body_field']['body']['#title'] == t('Body')) 	
			{
                $form['body_field']['body']['#title'] = t('Project Details');
            }
            $form['author']['name']['#title'] = t('Project manager');
            
            
            if($form_state['values']['nid'] == false) {
            
                if($tpl_projectid = arg(3)) {
                    $tpl_project = node_load($tpl_projectid);
//                    print_r($tpl_project);
                    $form['type'] = array('#type' => 'hidden', '#value' => $tpl_project->type);
                    $form['title']['#default_value'] = $tpl_project->title . ' COPY!';
                    $form['body_field']['body']['#default_value'] = $tpl_project->body;
                	$form['is_template']['#default_value'] = false;
                	$form['tpl_projectid'] = array(
                        '#type' => 'hidden',
                        '#value' => $tpl_projectid,
                    );
        
                	$form['project_settings']['tpl_projectid'] = array(
                		'#type' =>'item', 
                		'#title' => t('Template Project'),
                        '#default_value' => $tpl_project->title,
                        '#description' => t('The project this one was created from.'),
                    );
                    $form['projectstatus']['#default_value'] = $tpl_project->projectstatus;
                	$form['private']['#default_value'] = $tpl_project->private;
                	$form['importance']['#default_value'] = $tpl_project->importance;
                	$form['priority']['#default_value'] = $tpl_project->priority;
                	$form['project_hours']['hours_planned']['#default_value'] = $tpl_project->hours_planned;
                	$form['project_hours']['hours_spent']['#default_value'] =$tpl_project->hours_spent;
                	$form['project_hours']['hours_remaining']['#default_value'] =$tpl_project->hours_remaining;
                	$form['project_dates']['date_approved']['#default_value'] = $tpl_project->date_approved;
                	$form['project_dates']['planned_start_date']['#default_value'] = $tpl_project->planned_start_date;
                	$form['project_dates']['planned_end_date']['#default_value'] = $tpl_project->planned_end_date;
                	$form['project_dates']['actual_start_date']['#default_value'] = $tpl_project->actual_start_date;
                	$form['project_dates']['actual_end_date']['#default_value'] = $tpl_project->actual_end_date;
                    
                	$form['project_dates']['enable_team']['#default_value'] = $tpl_project->enable_team;
                	$form['project_dates']['track_dates']['#default_value'] = $tpl_project->track_dates;
                	$form['project_dates']['work_weekends']['#default_value'] = $tpl_project->work_weekends;
                	$form['project_dates']['approve_project_to_start']['#default_value'] = $tpl_project->approve_project_to_start;
                	$form['project_dates']['track_hours']['#default_value'] = $tpl_project->track_hours;
                	$form['project_dates']['show_hours_or_days']['#default_value'] = $tpl_project->show_hours_or_days;
                	$form['project_dates']['hours_per_day']['#default_value'] = $tpl_project->hours_per_day;
                	$form['project_dates']['approve_tasks_to_close']['#default_value'] = $tpl_project->approve_tasks_to_close;
                	$form['project_dates']['warning_lead']['#default_value'] = $tpl_project->warning_lead;
                        
                }
            }        
        }
    }
}

/**
 * Implementation of hook_node_type().
 * Rename or delete the settings variable if a type changes.
 */
function xproject_node_type($op, $info) {
    switch ($op) {
        case 'delete':
            variable_del('xproject_use_'. $info->type);
            variable_del('xproject_'. $info->type);
            break;
        case 'update':
            if (!empty($info->old_type) && $info->old_type != $info->type) {
                if (xproject_is_xproject($info->old_type)) {
                    $settings = variable_get('xproject_'. $info->old_type, array());
                    variable_del('xproject_use_'. $info->old_type);
                    variable_del('xproject_'. $info->old_type);
                    variable_set('xproject_use_'. $info->type, 1);
                    variable_set('xproject_'. $info->type, $settings);
                }
            }
            break;
    }
}

function xproject_user($op, $edit, &$account, $category = NULL) {
  global $user;

  switch ($op) {
    case 'register':
    
      break;
    case 'insert':
    
      break;
    case 'delete':
    
      break;
    case 'load':
    
      break;
    case 'view':
      // list projects...
      
      break;
  }
}

function xproject_spreadsheet_project($project_node) {
    $output = '';
    $tasklist = xtasks_get_tasklist($project_node->nid, 0, true);
//    $output .= print_r($tasklist, true);
    $output .= '<table border="1">';
    foreach($tasklist as $taskinfo) {
        $output .= '<tr><th>'.$taskinfo['taskname'].'</th><td>';
        
        $sql = "SELECT a.*, b.taskname, c.title as contact_title 
                FROM (xworklog a, xtasks b) 
                LEFT JOIN node c 
                ON c.nid = a.xcontactid 
                WHERE b.taskid = a.xtaskid
                AND a.xtaskid = %d
                ORDER BY a.dateworked DESC, a.datecreated DESC";
	    $result = db_query($sql, $taskinfo['taskid']);
        while($workloginfo = db_fetch_array($result)) {
            $output .= '<div>'.$workloginfo['notes'].'</div>';
        }
        $output .= '</td></tr>';    
        
        foreach($taskinfo['subtasks'] as $subtaskinfo) {
            $output .= '<tr><td style="padding-left: 20px;">'.$subtaskinfo['taskname'].'</td><td>';
        
            $sql2 = "SELECT a.*, b.taskname, c.title as contact_title 
                    FROM (xworklog a, xtasks b) 
                    LEFT JOIN node c 
                    ON c.nid = a.xcontactid 
                    WHERE b.taskid = a.xtaskid
                    AND a.xtaskid = %d
                    ORDER BY a.dateworked DESC, a.datecreated DESC";
    	    $result2 = db_query($sql2, $subtaskinfo['taskid']);
            while($workloginfo2 = db_fetch_array($result2)) {
                $output .= '<div>'.$workloginfo2['notes'].'</div>';
            }
            $output .= '</td></tr>';
        }
    }
    $output .= '</table>';
    return $output;
}

function xproject_get_project($nid) {
    $data = array();
    if ($nid) {
        $result = db_query('SELECT * FROM xproject WHERE nid = '.$nid);
        if($row = db_fetch_array($result)) {
            return $row;
        }
	}
    return array();
}


function xproject_update_project_hours($xprojectid, $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining) {
    $projectinfo = node_load($xprojectid);

    if($projectinfo) {
        $projectinfo->hours_planned += $delta_hours_planned;
        $projectinfo->hours_spent += $delta_hours_spent;
        $projectinfo->hours_remaining += $delta_hours_remaining;
        $projectinfo->hours_per_day = $projectinfo->hours_per_day ? $projectinfo->hours_per_day : variable_get('xproject_hours_per_day', 8);
        $extra_days = (int)($delta_hours_remaining / $projectinfo->hours_per_day);
        $extra_weeks = (int)($extra_days / 5);
        if($projectinfo->work_weekends) {
            $extra_weeks = (int)($extra_days / 7);
            $extra_weekdays = $extra_days % 7;
        } else {
            $extra_weeks = (int)($extra_days / 5);
            $extra_weekdays = $extra_days % 5;
        }
        $total_extra_days = $extra_weeks * 7 + $extra_weekdays;
        $projectinfo->planned_end_date = strtotime($projectinfo->planned_end_date . ' +'.$total_extra_days.' days');
        
        
        node_save($projectinfo);
    }
    return true;
}


function xproject_delete_project($nid) {
    if ($nid) {
    
        $tasks = xtasks_get_tasklist($nid, 0, false);
        
        foreach($tasks as $taskinfo) {
            xtasks_delete_task($taskinfo['taskid']);
        }
        
        $result = db_query('DELETE FROM xproject WHERE nid = '.$nid);
        if($result) {
            return TRUE;
        } else {
			return FALSE;
        }
	}
}

function xproject_importance_decr($projectinfo) {
    $projectinfo->importance++;
    node_save($projectinfo);

    drupal_set_message('Project importance decremented: '.$projectinfo->title);
    $destination = drupal_get_destination();
    
    if($destination == false) $destination = '/node/'.$nid;
    
    drupal_goto($destination);
}

function xproject_importance_incr($projectinfo) {
    $projectinfo->importance--;
    node_save($projectinfo);

    drupal_set_message('Project importance incremented: '.$projectinfo->title);
    $destination = drupal_get_destination();
    
    if($destination == false) $destination = 'node/'.$nid;
    
    drupal_goto($destination);
}

function xproject_priority_decr($projectinfo) {
    $projectinfo->priority++;
    node_save($projectinfo);
    
    $cascade_priority = variable_get('xproject_default_cascade_priority', 0);
    if($cascade_priority == true) {
        // update all active tasks IF XTASKS IS INSTALLED!!!
        $result = db_query('UPDATE xtasks SET taskpriority = taskpriority + 1 WHERE taskpriority < 9 AND taskstatus = "Active" AND xprojectid = %d', $projectinfo->nid);
    }

    drupal_set_message('Project priority decremented: '.$projectinfo->title);
    $destination = drupal_get_destination();
    
    if($destination == false) $destination = 'node/'.$nid;
    
    drupal_goto($destination);
}

function xproject_priority_incr($projectinfo) {
    $projectinfo->priority--;
    node_save($projectinfo);
    
    $cascade_priority = variable_get('xproject_default_cascade_priority', 0);
    if($cascade_priority == true) {
        // update all active tasks IF XTASKS IS INSTALLED!!!
        $result = db_query('UPDATE xtasks SET taskpriority = taskpriority - 1 WHERE taskpriority > 1 AND taskstatus = "Active" AND xprojectid = %d', $projectinfo->nid);
    }

    drupal_set_message('Project priority incremented: '.$projectinfo->title);
    $destination = drupal_get_destination();
    
    if($destination == false) $destination = 'node/'.$nid;
    
    drupal_goto($destination);
}

function xproject_get_types() {
    $types = node_get_types();
    foreach ($types as $type) {
        $type_usage = variable_get('xproject_use_'. $type->type, 0);
        $return[$type->type] = $type_usage;
    }
    return isset($return) ? $return : array();
}

function xproject_is_xproject($type) {
    if (is_object($type)) {
        $type = $type->type;
    }
    return variable_get('xproject_use_'. $type, FALSE);
}

/*
function xproject_block($op = 'list', $delta = 0, $edit = array()) {

}
*/

/**
 * Implementation of hook_theme().
 */
function xproject_theme() {
    $path = drupal_get_path('module', 'xproject');
    return array(
        'xproject' => array(
            'template' => 'xproject',
            'arguments' => array('node' => false),
            'path' => "$path/theme",
        ),
        'xproject_variance' => array(
            'template' => 'xproject_variance',
            'arguments' => array('projectinfo' => false, 'baseline_projectinfo' => false, 'tasklist' => false),
            'path' => "$path/theme",
        ),
        'xproject_report' => array(
            'template' => 'xproject_report',
            'arguments' => array('projectlist' => false),
            'path' => "$path/theme",
        ),
        'xproject_templates' => array(
            'template' => 'xproject_templates',
            'arguments' => array('projectlist' => false),
            'path' => "$path/theme",
        ),
    );
}

/**
 * Implementation of hook_views_api().
 */
function xproject_views_api() {
  return array(
    'api' => 2,
	'path' => drupal_get_path('module', 'xproject'),
  );
}

function xproject_variance_report($projectinfo) {


    if($projectinfo->baseline_projectid > 0) {
        $baseline_projectinfo = node_load($projectinfo->baseline_projectid);
        
//        $form['baseline_project'] = array('#type' => 'item', '#value' => print_r($baseline_project, true));
    } else {
        drupal_set_message(t('This project has no Baseline. Projects must have a Baseline in order for there to be variance...'), 'warning');
        drupal_goto($projectinfo->path);
        return;
    }
    
    $tasklist = array();
    
/*
    // count child and parent tasks equally?
    Total Tasks (for each)
    Tasks Added (no baseline_taskid)
    Tasks Removed (...yeah, good luck with that calculation)
    Tasks Underestimated (actual end date later than planned date)
    Tasks Rescheduled (planned end dates different)
*/
        
    return theme('xproject_variance', $projectinfo, $baseline_projectinfo, $tasklist);
}

?>