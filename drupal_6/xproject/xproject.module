<?php

function xproject_init() {
    // We have to perform a load in order to assure that the ajax/javascript bits are present.
    
    drupal_add_css(drupal_get_path('module', 'xproject'). '/theme/xproject.css');
    drupal_add_js(drupal_get_path('module', 'xproject'). '/js/xproject.js');
}

function xproject_help($path, $arg) {
  if ($path) {
    switch ($path) {
      case ($arg[2] == 'block' && $arg[4] == 'xproject'):
        return t('Project specific blocks help...');
        break;
      case 'admin/settings/xproject':
        return t('Configure the default behavior of projects and tasks for your site.');
        break;
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function xproject_perm() {
  return array('xproject administration', 'xproject access');
}


function xproject_convert_date2string($date_array, $format = 'storage') {
    if(is_array($date_array)) {
        switch($format) {
            case 'storage':
                return $date_array['year'].'-'.$date_array['month'].'-'.$date_array['day'].' 00:00:00';
                break;
            case 'display':
                return $date_array['year'].'-'.$date_array['month'].'-'.$date_array['day'];
                break;
        }
    }
}

function xproject_convert_date2array($date) {
    if(!is_string($date)) return $date;
    list($date_part, $time_part) = explode(' ', $date);
    list($year_part, $month_part, $day_part) = explode('-', $date_part);
    list($hour_part, $min_part, $sec_part) = explode(':', $time_part);
    $return_array = array('year' => (int)$year_part, 'month' => (int)$month_part, 'day' => (int)$day_part);
    return $return_array;
}

/**
 * Implementation of hook_menu().
 */
function xproject_menu() {
    $items['admin/settings/xproject'] = array(
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('xproject_admin_settings'),
        'access arguments' => array('xproject administration'),
        'file' => 'xproject.admin.inc',
        'file path' => drupal_get_path('module', 'xproject'). '/includes',
        'title' => 'xProject Settings'
    );
    $items['admin/content/xproject'] = array(
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'xproject_template_projects',
        'access arguments' => array('xproject administration'),
        'file' => 'xproject.admin.inc',
        'file path' => drupal_get_path('module', 'xproject'). '/includes',
        'title' => 'xProject Templates'
    );
    
	$items['node/%xproject_node/addtask'] = array(
    	'title' => 'Add Task',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1),
        'access arguments' => array('xproject administration'),
    );

    
    return $items;
}

function xproject_node_load($nid) {
	if (is_numeric($nid) && module_exists('xtasks')) {
		$node = node_load($nid);
        if (xproject_is_xproject($node->type)) {
            return $node;
        }
    }
	return false;
}


function xproject_preprocess_node(&$variables) {
    $node = $variables['node'];
    if (xproject_is_xproject($node->type)) {
        array_unshift($variables['template_files'], 'node-xproject');
    }
}

function xproject_theme_registry_alter(&$variables) {
  // Check for xproject provided templates just before we use the default node.tpl.php
  array_splice($variables['node']['theme paths'], 1, 0, drupal_get_path('module', 'xproject'). '/theme');
}

function xproject_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
    global $user;

    if(xproject_is_xproject($node->type) == true) {
    	$data = array();
        switch ($op) {
            case 'view':
                $node->content['project'] = array(
                  '#node' => $node,
                  '#weight' => -3,
                  '#value' => theme('xproject', $node),
                );
                
                    
//                print_r($node);
                break;
            case 'load':
                $result = db_query('SELECT * FROM xproject WHERE nid = '.$node->nid);
                if($row = db_fetch_array($result)) {
                    $row['date_approved'] = xproject_convert_date2array($row['date_approved']);
                    $row['planned_start_date'] = xproject_convert_date2array($row['planned_start_date']);
                    $row['planned_end_date'] = xproject_convert_date2array($row['planned_end_date']);
                    $row['actual_start_date'] = xproject_convert_date2array($row['actual_start_date']);
                    $row['actual_end_date'] = xproject_convert_date2array($row['actual_end_date']);
//print_r($row);
                    return $row;
                }
                break;
            case 'validate':
                break;
            case 'presave':
                break;
            case 'delete':
				$success = xproject_delete_project($node->nid);
				if(!$success)
					drupal_set_message('Error deleting xproject','error');
                break;
            case 'insert':
                // check for a project templateid and copy team and tasks if found
                if($node->tpl_projectid) {
//                    $template_project = node_load($node->tpl_projectid);
                    $sql = "SELECT projectid, contactid, notification_freq FROM xteam WHERE xprojectid = %d";
                    $result = db_query($sql, $node->tpl_projectid);
                    while($row = db_fetch_array($result)) {
                        $sql2 = "INSERT INTO xteam (projectid, contactid, notification_freq) VALUES (%, %, %)";
                        $result2 = db_query($sql2, $node->nid, $row['contactid'], $row['notification_freq']);
                    }
                    $sql = "SELECT * FROM xtasks WHERE xprojectid = %d";
                    $result = db_query($sql, $node->tpl_projectid);
                    while($row = db_fetch_array($result)) {
                        $sql2 = "INSERT INTO xteam (projectid, contactid, notification_freq) VALUES (%, %, %)";
                        $result2 = db_query($sql2, $node->nid, $row['contactid'], $row['notification_freq']);
                    }
                }
            
            case 'update':
                // will check for nid, so same code for both insert and update
                
                // drupal_write_record fails on fields with array values, so convert the dates:
                $node->planned_start_date = xproject_convert_date2string($node->planned_start_date);
                $node->planned_end_date = xproject_convert_date2string($node->planned_end_date);
                $node->actual_start_date = xproject_convert_date2string($node->actual_start_date);
                $node->actual_end_date = xproject_convert_date2string($node->actual_end_date);
                $node->date_approved = xproject_convert_date2string($node->date_approved);
                
//                print_r($node); die('test');
                $data = xproject_get_project($node->nid);
                if(isset($data['nid'])) {
			        drupal_write_record('xproject', $node,'nid');
                } else {
                    // xproject record not yet created, do so now (ex: content item after xprojects turned on for that node type)
    			    drupal_write_record('xproject', $node);
                }
                break;
            case 'search result':
                break;
            case 'rss item':
                break;
        }
	}
}


function xproject_project_form($node, $form_state) {
    global $user;
    
    $form = array();
    
    if(xproject_is_xproject($node->type) == false) {
        return $form;
    }
    
    // Set the default values for a new item. By using += rather than =, we
    // only overwrite array keys that have not yet been set. It's safe to use
    // on both an empty array, and an incoming array with full or partial data.
    $node = (array)$node;
    $node += array(
        'nid' => NULL,
    );
    $node = (object)$node;
//    print_r($node);
    // BEGIN BUILDING PROJECT FORM HERE. TITLE AND DESCRIPTION ARE HANDLED BY THE NODE ALREADY
    if($node->nid == false && $tpl_projectid == true) {
        $node = node_load($tpl_projectid);
        $node->nid = NULL;
    }
    
    
	if(!$node->nid) {
        $node->enable_team = variable_set('xproject_enable_team',true);
        $node->track_dates = variable_set('xproject_track_dates',true);
        $node->hours_per_day = variable_set('xproject_hours_per_day',8);
        $node->work_weekends = variable_set('xproject_work_weekends',false);
        $node->approve_project_to_start = variable_set('xproject_approve_project_to_start',false);
        $node->track_hours = variable_set('xproject_track_hours', true);
        $node->show_hours_or_days = variable_set('xproject_show_hours_or_days','Hours');
        $node->approve_tasks_to_close = variable_set('xproject_approve_tasks_to_close',false);
    }
    
	$form['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
    
	$form['projectstatus'] = array(
        '#type' => 'select', 
        '#title' => t('Status'), 
        '#default_value' => $node->projectstatus, 
        '#options' => array(
            'Draft' => t('Draft'), 
            'Pending' => t('Pending'), 
            'Active' => t('Active'),
            'On Hold' => t('On Hold'),
            'Archived' => t('Archived'),
        ), 
        '#description' => t('Status of project'),
        '#prefix' => '<div class="project-field-row">',
        );
	$form['importance'] = array(
        '#type' => 'select', 
        '#title' => t('Importance'), 
        '#default_value' => $node->importance, 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Overall level of project importance'),
        );
	$form['priority'] = array(
        '#type' => 'select', 
        '#title' => t('Priority'), 
        '#default_value' => $node->priority, 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Current priority of the project'),
        '#suffix' => '</div><div class="clear"></div>',
        );

    $form['project_hours'] = array(
        '#type' => 'fieldset',
        '#title' => t('Project Hours'),
        '#collapsible' => true,
        '#collapsed' => true,
    );
	$form['project_hours']['hours_planned'] = array(
		'#type' => 'textfield', 
		'#title' => t('Hours Planned'), 
		'#default_value' =>$node->hours_planned, 
		'#size' =>6 , 
		'#maxlength' => 16,
        '#prefix' => '<div class="project-field-row">', );
	$form['project_hours']['hours_spent'] = array(
		'#type' => 'textfield', 
		'#title' => t('Hours Spent'), 
		'#default_value' =>$node->hours_spent, 
		'#size' =>6 , 
		'#maxlength' => 16, );
	$form['project_hours']['hours_remaining'] = array(
		'#type' => 'textfield', 
		'#title' => t('Hours Remaining'), 
		'#default_value' =>$node->hours_remaining, 
		'#size' =>6 , 
		'#maxlength' => 16,
        '#suffix' => '</div><div class="clear"></div>', );

	
    
	if($node->show_hours_or_days == 'Days') {
	    $form['project_hours']['hours_planned']['#title'] = t('Days Planned');
	    $form['project_hours']['hours_planned']['#value'] = $node->hours_planned / $node->hours_per_day;
	    $form['project_hours']['hours_spent']['#title'] = t('Days Spent');
	    $form['project_hours']['hours_spent']['#value'] = $node->hours_spent / $node->hours_per_day;
	    $form['project_hours']['hours_remaining']['#title'] = t('Days Remaining');
	    $form['project_hours']['hours_remaining']['#value'] = $node->hours_remaining / $node->hours_per_day;
    }

    $form['project_dates'] = array(
        '#type' => 'fieldset',
        '#title' => t('Project Dates'),
        '#collapsible' => true,
        '#collapsed' => true,
    );
    if($node->approve_project_to_start) {
    	$form['project_dates']['date_approved'] = array(
    		'#type' => 'date', 
    		'#title' => 'Date approved', 
    		'#default_value' => $node->date_approved, 
    		'#description' => '',
        );
    }
	$form['project_dates']['planned_start_date'] = array(
		'#type' => 'date', 
		'#title' => 'Planned start date', 
		'#default_value' => $node->planned_start_date, 
		'#description' => '',
        '#prefix' => '<div class="project-field-row">', );
	$form['project_dates']['planned_end_date'] = array(
		'#type' => 'date', 
		'#title' => 'Planned end date', 
		'#default_value' => $node->planned_end_date, 
		'#description' => '',
        '#suffix' => '</div><div class="clear"></div>', );
    
	if($node->track_dates) {
        
        $form['project_dates']['actual_start_date'] = array(
    		'#type' => 'date', 
    		'#title' => 'Actual start date', 
    		'#default_value' => $node->actual_start_date, 
    		'#description' => '',
            '#prefix' => '<div class="project-field-row">', );
    	$form['project_dates']['actual_end_date'] = array(
    		'#type' => 'date', 
    		'#title' => 'Actual end date', 
    		'#default_value' => $node->actual_end_date, 
    		'#description' => '',
            '#suffix' => '</div><div class="clear"></div>', );
    }
         
    $form['project_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Project Settings'),
        '#collapsible' => true,
        '#collapsed' => true,
    );
        
	$form['project_settings']['is_template'] = array(
		'#type' =>'checkbox', 
		'#title' => t('Is template'),
        '#default_value' => $node->is_template,
        '#description' => t('A template project is used to create new projects with pre-populated task lists.'),
    );
    if($node->tpl_projectid) {
        $template_project = node_load($node->tpl_projectid);
        
    	$form['project_settings']['tpl_projectid'] = array(
    		'#type' =>'item', 
    		'#title' => t('Template Project'),
            '#default_value' => $template_project->title,
            '#description' => t('The project this one was created from.'),
        );
    }
    
	$form['project_settings']['private'] = array(
		'#type' =>'checkbox', 
		'#title' => t('Private'),
		'#default_value' => $node->private,
        '#description' => t('Public projects may be viewed by non-team members. Team members may not view tasks in private projects that they are not assigned to.'),
        );
        
    $form['project_settings']['enable_team'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Enable Project Team'), 
		'#default_value' => $node->nid ? $node->enable_team : variable_get('xproject_enable_team', true), 
        '#description' => t('Enable multiple contacts to participate in the project and be assigned tasks.'),
    );
    $form['project_settings']['track_dates'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Track Dates'), 
		'#default_value' => $node->nid ? $node->track_dates : variable_get('xproject_track_dates', true), 
        '#description' => t('Record planned and actual dates.'),
    );
    $form['project_settings']['work_weekends'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Work Weekends'), 
		'#default_value' => $node->nid ? $node->work_weekends : variable_get('xproject_work_weekends', true), 
        '#description' => t('Record planned and actual dates.'),
    );
    $form['project_settings']['approve_project_to_start'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Approve Project to Start'), 
		'#default_value' => $node->nid ? $node->approve_project_to_start : variable_get('xproject_approve_project_to_start', true), 
        '#description' => t('Require project to be "approved" in order to set actual start date and make tasks active.'),
    );
    $form['project_settings']['track_hours'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Track Hours'), 
		'#default_value' => $node->nid ? $node->track_hours : variable_get('xproject_track_hours', true), 
        '#description' => t('Record hours planned, spent and remaining.'),
    );
    $form['project_settings']['show_hours_or_days'] = array(
        '#type' => 'select', 
        '#title' => t('Show Hours or Days'), 
		'#default_value' => $node->nid ? $node->show_hours_or_days : variable_get('xproject_show_hours_or_days', 'Hours'), 
        '#options' => array(
            'Hours' => 'Hours',
            'Days' => 'Days',
        ),
        '#description' => t('Display hours or round into days for worklogs, task hours and project hours.'),
    );
    $form['project_settings']['hours_per_day'] = array(
        '#type' => 'textfield', 
        '#title' => t('Work Hours per Day'),
        '#default_value' => $node->nid ? $node->hours_per_day : variable_get('xproject_hours_per_day', 8), 
        '#description' => t('Total working hours per day.'),
    );
    $form['project_settings']['approve_tasks_to_close'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Approve Tasks to Close'), 
		'#default_value' => $node->nid ? $node->approve_tasks_to_close : variable_get('xproject_approve_tasks_to_close', true), 
        '#description' => t('Require tasks to be approved by their creator before they can be closed.'),
    );
    
    
    return $form;
}

function xproject_form_alter(&$form, &$form_state, $form_id) {

    if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
        $node = $form['#node'];
//print_r($form);
        if (xproject_is_xproject($node->type)) {

            $form = array_merge($form, xproject_project_form($node, $form_state));
            // Don't trample on custom label.
			 if (isset($form['title']) && $form['title']['#title'] == t('Title'))
			 {
				$form['title']['#title'] = t('Project Name');
			 }
            if (isset($form['body_field']) && $form['body_field']['body']['#title'] == t('Body')) 	
			{
                $form['body_field']['body']['#title'] = t('Project Details');
            }
            $form['author']['name']['#title'] = t('Project manager');
            
            
            if($form_state['values']['nid'] == false) {
            
                if($tpl_projectid = arg(3)) {
                    $tpl_project = node_load($tpl_projectid);
//                    print_r($tpl_project);
                    $form['title']['#default_value'] = $tpl_project->title;
                    $form['body_field']['body']['#default_value'] = $tpl_project->body;
                	$form['is_template']['#default_value'] = false;
                	$form['tpl_projectid'] = array(
                        '#type' => 'hidden',
                        '#value' => $tpl_projectid,
                    );
        
                	$form['project_settings']['tpl_projectid'] = array(
                		'#type' =>'item', 
                		'#title' => t('Template Project'),
                        '#default_value' => $tpl_project->title,
                        '#description' => t('The project this one was created from.'),
                    );
                    $form['projectstatus']['#default_value'] = $tpl_project->projectstatus;
                	$form['private']['#default_value'] = $tpl_project->private;
                	$form['importance']['#default_value'] = $tpl_project->importance;
                	$form['priority']['#default_value'] = $tpl_project->priority;
                	$form['project_hours']['hours_planned']['#default_value'] = $tpl_project->hours_planned;
                	$form['project_hours']['hours_spent']['#default_value'] =$tpl_project->hours_spent;
                	$form['project_hours']['hours_remaining']['#default_value'] =$tpl_project->hours_remaining;
                	$form['project_dates']['date_approved']['#default_value'] = $tpl_project->date_approved;
                	$form['project_dates']['planned_start_date']['#default_value'] = $tpl_project->planned_start_date;
                	$form['project_dates']['planned_end_date']['#default_value'] = $tpl_project->planned_end_date;
                	$form['project_dates']['actual_start_date']['#default_value'] = $tpl_project->actual_start_date;
                	$form['project_dates']['actual_end_date']['#default_value'] = $tpl_project->actual_end_date;
                    
                	$form['project_dates']['enable_team']['#default_value'] = $tpl_project->enable_team;
                	$form['project_dates']['track_dates']['#default_value'] = $tpl_project->track_dates;
                	$form['project_dates']['work_weekends']['#default_value'] = $tpl_project->work_weekends;
                	$form['project_dates']['approve_project_to_start']['#default_value'] = $tpl_project->approve_project_to_start;
                	$form['project_dates']['track_hours']['#default_value'] = $tpl_project->track_hours;
                	$form['project_dates']['show_hours_or_days']['#default_value'] = $tpl_project->show_hours_or_days;
                	$form['project_dates']['approve_tasks_to_close']['#default_value'] = $tpl_project->approve_tasks_to_close;
                        
                }
            }        
        }
    } elseif ($form_id == 'node_type_form') {
        $form['xproject'] = array(
          '#type' => 'fieldset',
          '#title' => t('xProject'),
          '#group' => 'additional_settings',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#weight' => 32,
        );
        $form['xproject']['xproject_use'] = array(
          '#type' => 'checkbox',
          '#title' => t('Use this content type as a project'),
          '#default_value' => variable_get('xproject_use_'. $form['#node_type']->type, FALSE),
        );
    }
}

/**
 * Implementation of hook_node_type().
 * Rename or delete the settings variable if a type changes.
 */
function xproject_node_type($op, $info) {
    switch ($op) {
        case 'delete':
            variable_del('xproject_use_'. $info->type);
            variable_del('xproject_'. $info->type);
            break;
        case 'update':
            if (!empty($info->old_type) && $info->old_type != $info->type) {
                if (xproject_is_xproject($info->old_type)) {
                    $settings = variable_get('xproject_'. $info->old_type, array());
                    variable_del('xproject_use_'. $info->old_type);
                    variable_del('xproject_'. $info->old_type);
                    variable_set('xproject_use_'. $info->type, 1);
                    variable_set('xproject_'. $info->type, $settings);
                }
            }
            break;
    }
}

function xproject_user($op, $edit, &$account, $category = NULL) {
  global $user;

  switch ($op) {
    case 'register':
    
      break;
    case 'insert':
    
      break;
    case 'delete':
    
      break;
    case 'load':
    
      break;
    case 'view':
      
      break;
  }
}

function xproject_get_project($nid) {
    $data = array();
    if ($nid) {
        $result = db_query('SELECT * FROM xproject WHERE nid = '.$nid);
        if($row = db_fetch_array($result)) {
            return $row;
        }
	}
    return array();
}


function xproject_update_project_hours($xprojectid, $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining) {
    $projectinfo = node_load($xprojectid);
    $projectinfo->hours_planned += $delta_hours_planned;
    $projectinfo->hours_spent += $delta_hours_spent;
    $projectinfo->hours_remaining += $delta_hours_remaining;
    $extra_days = (int)($delta_hours_remaining / $projectinfo->hours_per_day);
    $extra_weeks = (int)($extra_days / 5);
    if($projectinfo->work_weekends) {
        $extra_weeks = (int)($extra_days / 7);
        $extra_weekdays = $extra_days % 7;
    } else {
        $extra_weeks = (int)($extra_days / 5);
        $extra_weekdays = $extra_days % 5;
    }
    $total_extra_days = $extra_weeks * 7 + $extra_weekdays;
    $projectinfo->planned_end_date = strtotime(xproject_convert_date2string($projectinfo->planned_end_date) . ' +'.$total_extra_days.' days');
    
    
    node_save($projectinfo);
    return true;
}


function xproject_delete_project($nid) {
    if ($nid) {
        $result = db_query('DELETE FROM xproject WHERE nid = '.$nid);
        if($result) {
            return TRUE;
        } else {
			return FALSE;
        }
	}
}

function xproject_get_types() {
    $types = node_get_types();
    foreach ($types as $type) {
        $type_usage = variable_get('xproject_use_'. $type->type, 0);
        $return[$type->type] = $type_usage;
    }
    return isset($return) ? $return : array();
}

function xproject_is_xproject($type) {
    if (is_object($type)) {
        $type = $type->type;
    }
    return variable_get('xproject_use_'. $type, FALSE);
}

function xproject_block($op = 'list', $delta = 0, $edit = array()) {

}

/**
 * Implementation of hook_theme().
 */
function xproject_theme() {
    $path = drupal_get_path('module', 'xproject');
    return array(
        'xproject' => array(
            'template' => 'xproject',
            'arguments' => array('node' => false),
            'path' => "$path/theme",
        ),
        'xproject_templates' => array(
            'template' => 'xproject_templates',
            'arguments' => array('projectlist' => false),
            'path' => "$path/theme",
        ),
    );
}

/**
 * Implementation of hook_views_api().
 */
function xproject_views_api() {
  return array(
    'api' => 2,
	'path' => drupal_get_path('module', 'xproject'),
  );
}

?>