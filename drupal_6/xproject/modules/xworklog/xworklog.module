<?php
/**
 * Implementation of hook_perm().
 */
function xworklog_perm() {
    return array('create worklog', 'xworklog access', 'edit worklog', 'delete worklog', 'xworklog attachments');
}

/**
 * Implementation of hook_menu().
 */

function xworklog_menu() {
    $items = array();
    
    $items['xworklog/%/worklog/%/edit'] = array(
    	'title' => 'Edit Worklog',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xworklog_form', 1, 3),
        'access arguments' => array('edit worklog'),
    );
    $items['xworklog/%/worklog/%/delete'] = array(
    	'title' => 'delete Worklog',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xworklog_confirm_form', 1, 3),
        'access arguments' => array('delete worklog'),
    );
	$items['node/%xproject_node/worklog'] = array(
    	'title' => 'Worklogs',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'xworklog_page',
        'page arguments' => array(1),
        'access arguments' => array('xworklog access'),
    );
	$items['node/%xproject_node/worklog/%'] = array(
    	'title' => 'Worklogs',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'xworklog_page',
        'page arguments' => array(1, 3, false),
        'access arguments' => array('create worklog'),
    );
	$items['node/%xproject_node/worklog/%/showform'] = array(
    	'title' => 'Worklogs',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'xworklog_page',
        'page arguments' => array(1, 3, true),
        'access arguments' => array('create worklog'),
    );
    $items['xtasks/%/worklog'] = array(
    	'title' => 'Worklog',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 40,
    	'page callback' => 'xworklog_page',
        'access arguments' => array('xworklog access'),
    );

	
    return $items;
}

function xworklog_confirm_form($form_state, $xtaskid, $logid) {
    $form = array();
//    $form['logid'] = array('#type' => 'hidden', '#value' => $logid);
//    $form['xtaskid'] = array('#type' => 'hidden', '#value' => $xtaskid);
    return confirm_form(
        $form, 
        'Are you sure you want to delete this worklog?',
        isset($_GET['destination']) ? $_GET['destination'] : "",
        "Confirm if you want to delete this worklog?"
    );
}

function xworklog_confirm_form_submit($form, &$form_state){
//print_r($form_state); die('test');
//    if(isset($form_state['values']['logid']) && isset($form_state['values']['projectid'])) {
    	$sql = 'DELETE FROM xworklog WHERE logid = %d';
    	$result = db_query($sql, arg(3)); // $form_state['values']['logid']);
    	if($result) {
    		drupal_set_message('Worklog Deleted');
    	} else {
    		drupal_set_message('Error deleting worklog','error');
        }
//    }
}

function xworklog_node_load($logid) {
	if (is_numeric($logid)) {
		$node = get_worklog_detail($logid);
            return $node;
        }
	return FALSE;
}

function xworklog_form($form_state, $taskid, $logid = 0) {
    global $user;
    
    $form['worklog'] = array('#type' => 'fieldset', '#title' => 'Worklog', '#collapsible' => false, '#collapsed' => false);

    if($logid == false) {
        global $user;
        $form['xtaskid'] = array('#type' => 'hidden', '#value' => $taskid);
        $form['creator'] = array('#type' => 'hidden', '#value' => $user->uid);
        
        $myprofile = content_profile_load('xcontact', $user->uid);
    	$xcontactid = $myprofile->nid; // $user->xcontact;
        
    } else {
    
        $data = get_worklog_detail($logid);

        $form['logid'] = array(
            '#type' => 'hidden', 
            '#value' => $logid,
        );
        $form['creator'] = array('#type' => 'hidden', '#value' => $data['creator']);
        $xcontactid = $data['xcontactid'];
    }
    
    $taskinfo = get_task_detail($taskid);
    
    $form['worklog']['taskname'] = array('#title' => t('Task'), '#type' => 'item', '#value' => $taskinfo['taskname']);

    $ownerinfo = node_load($taskinfo['owner']);
    $assigner = node_load($taskinfo['assigned_by']);
    $projectinfo = node_load($taskinfo['xprojectid']);
    
    if($projectinfo->private == false) {
        if($parent_taskinfo['taskprivate'] == false) {
            drupal_set_message(t('This worklog will be published.'), 'status');
        } else {
            drupal_set_message(t('This worklog will only be available to team members.'), 'status');
        }
    } elseif($parent_taskinfo['taskprivate'] == false) {
        drupal_set_message(t('This worklog will be viewable by all team members.'), 'status');
    }
    
    $contactlist = xteam_get_all_contacts('companies', $taskinfo['projectid']);

    $form['worklog']['hours'] = array(
        '#type' => 'textfield', 
        '#title' => t('Hours Worked'),
		'#default_value' => $data['hours'] ? $data['hours'] : '0', 
		'#size' =>6 , 
		'#maxlength' => 16,
        '#required' => TRUE,
        '#prefix' => '<div class="project-field-row">',
    );
        
    $form['worklog']['hours_remaining'] = array(
        '#type' => 'textfield', 
        '#title' => t('Hours Remaining'),
		'#default_value' => $taskinfo['hours_remaining'], 
		'#size' =>6 , 
		'#maxlength' => 16,
        '#required' => TRUE,
    );
    
    if($projectinfo->show_hours_or_days == 'Days') {
        $form['worklog']['hours']['#title'] = t('Days Worked');
        $form['worklog']['hours_remaining']['#title'] = t('Days Remaining');
    }

	$form['worklog']['dateworked'] = array(
		'#type' => 'date', 
		'#title' => 'Date Worked', 
		'#default_value' => $data['dateworked'], 
		'#description' => '', 
        '#suffix' => '</div><div class="clear"></div>',
    );
    
    if(count($contactlist) > 0) {
        $form['worklog']['xcontactid'] = array(
            '#type' => 'select', 
            '#title' => t('Performed By'), 
            '#options' => $contactlist,
    		'#default_value' => $xcontactid, 
            '#prefix' => '<div class="project-field-row">',
        );
    
        $form['worklog']['assigned_to'] = array(
            '#type' => 'select', 
            '#title' => t('Assign To'), 
            '#options' => $contactlist,
    		'#default_value' => $taskinfo['assigned_to'], 
    //        '#description' => t('Select a contact to (re)assign the task to.'),
            '#suffix' => '</div><div class="clear"></div>',
        );
    } else {
        $form['worklog']['xcontactid'] = array(
            '#type' => 'hidden', 
    		'#default_value' => $xcontactid, 
        );
    
        $form['worklog']['assigned_to'] = array(
            '#type' => 'hidden', 
    		'#default_value' => $taskinfo['assigned_to'], 
        );
    }
    
    $form['worklog']['cc_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email Updates'),
        '#description' => t('Cc list of non-team email addresses'),
    );
            
    $form['worklog']['task'] = array(
        '#type' => 'fieldset',
        '#title' => t('Task Update'),
        '#collapsible' => true,
        '#collapsed' => true,
    );
    
    if(user_access('xproject administration') || variable_get('xproject_default_status_workflow', 0) == false) {
        $form['worklog']['task']['taskstatus'] = array(
            '#type' => 'select', 
            '#title' => t('Status'), 
            '#default_value' => $taskinfo['taskstatus'], 
            '#options' => array(
                'Draft' => t('Draft'), 
                'Pending' => t('Pending'), 
                'Active' => t('Active'),
                'Completed' => t('Completed'),
                'Archived' => t('Archived'),
            ), 
    //        '#description' => t('Status of task'),
            '#prefix' => '<div class="project-field-row">',
        );
    }
  	$form['worklog']['task']['taskimportance'] = array(
        '#type' => 'select', 
        '#title' => t('Importance'), 
        '#default_value' => $taskinfo['taskimportance'], 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Overall level of task importance'),
    );
  	$form['worklog']['task']['taskpriority'] = array(
        '#type' => 'select', 
        '#title' => t('Priority'), 
        '#default_value' => $taskinfo['taskpriority'], 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Current priority of the task'),
        '#suffix' => '<div class="clear"></div></div>',
    );
    
    $form['worklog']['notes'] = array(
        '#type' => 'textarea', 
        '#title' => 'Work Details', 
        '#default_value' => $data['notes'], 
        '#rows' => 4, 
        '#required' => false,
        '#description' => t('Notes are optional. You may log just the hours worked if an update is not ready yet.'),
    );
    if(user_access('upload files')) {
        $form['#attributes'] = array('enctype' => "multipart/form-data");
        $form['worklog']['file_attachment'] = array(
            '#type' => 'file',
            '#title' => t('File Attachment'),
            '#description' => t('Include an optional file attachment with this worklog entry.'),
        );
        $form['worklog']['publish_file'] = array(
            '#type' => 'checkbox',
            '#title' => t('Publish file to project?'),
        );
    }
 
    $form['worklog']['submit'] = array('#type' => 'submit', '#value' => t('Save'));
    
    $form['worklog']['submit']['#suffix'] = ' <input class="ajax-form-cancel" type="button" value="Cancel" />';

    return $form;
}

function xworklog_form_submit($form, &$form_state) {

    $taskinfo = get_task_detail($form_state['values']['xtaskid']);

    $form_state['values']['dateworked'] = xproject_convert_date2string($form_state['values']['dateworked']);
    $form_state['values']['datecreated'] = date('Y-m-d H:i:s'); // xproject_convert_date2string($form_state['values']['datecreated']);
    
    if(isset($_FILES['files']['name']['file_attachment'])) {
        if($file_obj = file_save_upload('file_attachment', NULL, file_directory_path())) {
        
            $file_obj->list = 1;
            $file_obj->new = true;
        //    print_r($save); die('test');
            file_set_status($file_obj, 1);
            
            $form_state['values']['notes'] .= '<p>'.l($file_obj->filename, $file_obj->filepath).'</p>';    
            
            if($form_state['values']['publish_file']) {
                $project = node_load($taskinfo['xprojectid']);
                $project->files[$file_obj->fid] = $file_obj;
                node_save($project);
            }
            
            $taskinfo['has_attachment'] = 1;
        }
    }
        
    $taskinfo = get_task_detail($form_state['values']['xtaskid']);
//print_r($form_state['values']); die('test');


    if($taskinfo['assigned_to'] != $form_state['values']['assigned_to']) {
        // is being re-assigned, notify?
    }
    
    // if this is the first worklog entry, set the actual start date? should the status also be set to active?
    $sql = "SELECT COUNT(*) as ttl_worklogs FROM xworklog WHERE xtaskid = %d";
    $result = db_query($sql, $form_state['values']['xtaskid']);
    $row = db_fetch_array($result);
    if($row['ttl_worklogs'] == 0) {
        $taskinfo['actual_start_date'] = $form_state['values']['date_worked'];
    }
    
    // set actual start date if task is being activated for the first time
    if(($taskinfo['taskstatus'] == 'Draft' || $taskinfo['taskstatus'] == 'Pending') 
            && $form_state['values']['taskstatus'] == 'Active') {
        $taskinfo['actual_start_date'] = $form_state['values']['date_worked'];
    }
    
    // set actual end date if task is being completed for the first time
    if(($taskinfo['taskstatus'] == 'Draft' || $taskinfo['taskstatus'] == 'Pending' || $taskinfo['taskstatus'] == 'Active') 
            && $form_state['values']['taskstatus'] == 'Completed') {
        $taskinfo['actual_end_date'] = $form_state['values']['date_worked'];
    }
    
    // auto-increment task priority (ie: decrease) [on active tasks only?] if no notes submitted and 
    //  priority not being changed anyway, as a module option setting (or if notes and hours both present)
    if($form_state['values']['taskstatus'] == 'Active' 
        && (empty($form_state['values']['notes']) || !empty($form_state['values']['hours']))
        && $form_state['values']['taskpriority'] == $taskinfo['taskpriority']) { 
        $form_state['values']['taskpriority']++;
    }

    $taskinfo['assigned_to'] = $form_state['values']['assigned_to'];

    $hours_previously_spent = $taskinfo['hours_spent'];
    $taskinfo['hours_spent'] += $form_state['values']['hours'];
    $hours_previously_remaining = $taskinfo['hours_remaining'];
    $taskinfo['hours_remaining'] = $form_state['values']['hours_remaining'];
    $taskinfo['taskstatus'] = $form_state['values']['taskstatus'];
    $taskinfo['taskpriority'] = $form_state['values']['taskpriority'];
    $taskinfo['taskimportance'] = $form_state['values']['taskimportance'];
    $taskinfo['planned_start_date'] = xproject_convert_date2string($taskinfo['planned_start_date']);
    $taskinfo['planned_end_date'] = xproject_convert_date2string($taskinfo['planned_end_date']);
    $taskinfo['actual_start_date'] = xproject_convert_date2string($taskinfo['actual_start_date']);
    $taskinfo['actual_end_date'] = xproject_convert_date2string($taskinfo['actual_end_date']);
    $taskinfo['date_approved'] = xproject_convert_date2string($taskinfo['date_approved']); 
    drupal_write_record('xtasks', $taskinfo, 'taskid');

/*
- auto-activate (submitted) dependent tasks when the task depended on is closed.
- auto-activate (submitted) non-dependent subtasks on parent activation
- subtask planned start date defaults to parent
*/
//    xtasks_activate
    
    $delta_hours_remaining = $form_state['values']['hours_remaining'] - $hours_previously_remaining;
    if($taskinfo['parent_taskid']) {
//        print_r($taskinfo); die('test');
        // get a negative delta_hours_remaining when it decreases for adjusting parent task(s) and the project
//        xproject_update_project_hours($taskinfo['parent_taskid'], 0, $form_state['values']['hours'], $delta_hours_remaining);

        xtasks_update_parent_task($taskinfo['parent_taskid'], 0, $form_state['values']['hours'], $delta_hours_remaining);

    } elseif($taskinfo['xprojectid']) {
        // only update project if no parent task
/*
        $projectinfo = node_load($taskinfo['xprojectid']);
        $projectinfo->hours_spent += $form_state['values']['hours'];
        $projectinfo->hours_remaining += $delta_hours_remaining;
        if($projectinfo->hours_remaining > 0) $projectinfo->hours_remaining = 0;
        node_save($projectinfo);
*/
        xproject_update_project_hours($taskinfo['xprojectid'], 0, $form_state['values']['hours'], $delta_hours_remaining);

		drupal_set_message('Project updated');
    }
    
    if(isset($form_state['values']['logid'])) {
		drupal_write_record('xworklog', $form_state['values'],'logid');
		drupal_set_message('Worklog updated');
    } else {
		drupal_write_record('xworklog', $form_state['values']);
    	drupal_set_message('A new Worklog has been added');
	}
    
    xworklog_notify($form_state['values']['logid'], $form_state['values']['cc_email']);
    
}

function xworklog_notify($logid, $cc_email) {
    global $user;
    
    if($logid == false) return;
    
    $worklog = get_worklog_detail($logid);
    
    $contactinfo = node_load($worklog['xcontactid']);
    
    $user_data = user_load(array('uid' =>$worklog['creator'] ));
    $creatorname = $user_data->name;
    
    $dateworked_array = explode(' ', xproject_convert_date2string($worklog['dateworked']));
    $dateworked = $dateworked_array[0];
    
    $taskinfo = get_task_detail($worklog['xtaskid']);
    
    $ownerinfo = node_load($taskinfo['owner']);
    
    $assigned_by = node_load($taskinfo['assigned_by']);
    
    $assigned_to = node_load($taskinfo['assigned_to']);
    
    $projectinfo = node_load($taskinfo['xprojectid']);

    $subject = 'New Worklog for '.$projectinfo->title;
    
    // create the text version of the email body
    $body_text = "A new worklog entry has been submitted for the project: ".$projectinfo->title.".\n\n";
    $body_text .= "Task: ".$taskinfo['taskname']."\n\n";
    $body_text .= $worklog['hours'].'hrs by '.$contactinfo->title.' on '.$dateworked."\n\n";
    $body_text .= $worklog['notes']."\n\n";
    if(!empty($cc_email)) {
        $body_text .= "Cc sent to: ".$cc_email."\n\n";
    }
    $body_text .= url($projectinfo->path, array('absolute' => true));
    
    // create an html version of the email
    $body_html = str_replace("\n", "<br>", $body_text);

    
    $params = array();
    $params['account'] = $user;
    $params['xproject'] = $projectinfo;
    $params['xtask'] = $taskinfo;
    $params['subject'] = $subject;
    $params['bodytext'] = $body_text;

    // send email
    /* these should each be covered by the teamlist loop that follows...
    if(!empty($ownerinfo->alert_email)) {
        $to = $ownerinfo->alert_email;
        drupal_mail('xworklog', 'notice', $to, user_preferred_language($user), $params);
    }
    if(!empty($assigned_by->alert_email) && $assigned_by->nid != $ownerinfo->nid) {
        $to = $assigned_by->alert_email;
        drupal_mail('xworklog', 'notice', $to, user_preferred_language($user), $params);
    }
        
    if(!empty($assigned_to->alert_email) && $assigned_to->nid != $ownerinfo->nid && $assigned_to->nid != $assigned_by->nid) {
        $to = $assigned_to->alert_email;
        drupal_mail('xworklog', 'notice', $to, user_preferred_language($user), $params);
    }
    */
    $teamlist = xteam_get_all_contacts($format = 'companies', $taskinfo['xprojectid']);
    foreach($teamlist as $team_nid => $team_member) {
        $team_member_data = xteam_get_contact($taskinfo['xprojectid'], $team_nid);
        if($taskinfo['private'] == false || $team_nid == $taskinfo['owner'] || $team_nid == $taskinfo['assigned_by'] || $team_nid == $taskinfo['assigned_to']) {
            $memberinfo = node_load($team_nid);
            if(!empty($memberinfo->alert_email) && $team_member_data['instant_alerts'] == 1 && $memberinfo->uid != $user->uid) {
                $to = $memberinfo->alert_email;
                drupal_mail('xworklog', 'notice', $to, user_preferred_language($user), $params);
           }
        }
    }
    if(!empty($cc_email)) {
        drupal_mail('xworklog', 'notice', $cc_email, user_preferred_language($user), $params);
    }
    drupal_set_message('Task updates have been sent.');
}

function xworklog_mail($key, &$message, $params) {
    $data['user'] = $params['account'];
    $options['language'] = $message['language'];
    user_mail_tokens($variables, $data, $options);
    switch($key) {
        case 'notice':
            $langcode = $message['language']->language;
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['bodytext'];
            break;
    }
}

function xworklog_update_parent_task($taskid, $delta_hours_spent, $delta_hours_remaining) {
    
    if($taskinfo['parent_taskid'] == false) return;
    
    $parentinfo = get_task_detail($taskid);
    
    $parentinfo['hours_spent'] += $taskinfo['delta_hours_spent'];
    $parentinfo['hours_remaining'] += $taskinfo['delta_hours_remaining'];
    
    
    
    if($parentinfo['parent_taskid']) {
        return xworklog_update_parent_task($parentinfo['parent_taskid'], $delta_hours_spent, $delta_hours_remaining);
    } elseif($parentinfo['xprojectid']) {
        return xworklog_update_project($parentinfo['xprojectid'], $delta_hours_spent, $delta_hours_remaining);
    }
    
    drupal_set_message('Worklog should have updated either a parent task or the project! Check code...');
    return false;

}

function get_worklog_detail($logid)
{
    $sql = 'SELECT * FROM xworklog where logid = '.$logid;
    $result = db_query($sql);
    if($row = db_fetch_array($result))
    {
        $row['dateworked'] = xproject_convert_date2array($row['dateworked']);
                        
    	return $row;
    }
}
/*
function xworklog_confirm_form(){

    return confirm_form(array(),'Are you sure you want to delete this Worklog?',isset($_GET['destination']) ? $_GET['destination'] : "");

}

function xworklog_confirm_form_submit(){
    if(arg(0) == 'xworklog' && arg(2) == 'delete'){
    	$sql = 'DELETE FROM xworklog where logid = ' . arg(1);
    	$result = db_query($sql);
    	if($result)
    		drupal_set_message('Worklog deleted');
    	else
    		drupal_set_message('Error deleting Worklog','error');
    }
}
*/
/**
 * Implementation of hook_theme().
 */
function xworklog_theme() {
    $path = drupal_get_path('module', 'xproject');
    return array(
        'worklog' => array(
            'template' => 'worklog',
            'arguments' => array('worklog' => false, 'worklogform' => false, 'showtasks' => false),
            'path' => "$path/theme",
        ),
        'worklog_table' => array(
            'template' => 'worklog_table',
            'arguments' => array('worklog' => false, 'worklogform' => false, 'showtasks' => false),
            'path' => "$path/theme",
        ),
    );
}


function xworklog_page($projectinfo, $taskid = 0, $showform = false) {
//    $sql = 'SELECT a.*, b.title as contact_title FROM xworklog a LEFT JOIN node b WHERE b.nid = a.xcontactid ORDER BY date_worked DESC';
	$worklog = array();
    /* if argument xprojectid is present then add where clause otherwise list all tasks on this page */

	$worklogform = '';
    
    $sql = "SELECT a.*, b.taskname, c.title as contact_title 
            FROM (xworklog a, xtasks b) 
            LEFT JOIN node c 
            ON c.nid = a.xcontactid 
            WHERE b.taskid = a.xtaskid";
    if($taskid) {
        if($showform) {
        	$worklogform = drupal_get_form('xworklog_form', $taskid);
        }
        $sql .= " AND a.xtaskid = %d";
	    $sql .= " ORDER BY a.dateworked DESC, a.datecreated DESC";
	    $result = db_query($sql, $taskid);
	} else {
        $sql .= " AND b.xprojectid = %d";
        $sql .= " ORDER BY a.dateworked DESC, a.datecreated DESC";
	    $result = db_query($sql, $projectinfo->nid);
	}
    
    while($workloginfo = db_fetch_array($result)) {
        $user_data = user_load(array('uid' =>$workloginfo['creator'] ));
		$workloginfo['creatorname'] = $user_data->name;
        $dateworked_array = explode(' ', $workloginfo['dateworked']);
        $workloginfo['dateworked'] = $dateworked_array[0];
        $workloginfo['editlink'] = url('xworklog/'.$workloginfo['xtaskid'].'/worklog/'.$workloginfo['logid'].'/edit', array('query' => drupal_get_destination()));
        $workloginfo['deletelink'] = url('xworklog/'.$workloginfo['xtaskid'].'/worklog/'.$workloginfo['logid'].'/delete', array('query' => drupal_get_destination()));
//        $dateworked = date_make_date($date, 'UTC', $type);
//        date_timezone_set($date, timezone_open($local_zone));
//        date_format_date($date, 'custom', 'm/d/Y H:i');
		$worklog[$workloginfo['logid']] = $workloginfo;
    }
    $worklog_htmltable = variable_get('worklog_htmltable', false);

    if($worklog_htmltable == true) {
    	return theme('worklog_table', $worklog, $worklogform, false);
    } else {
    	return theme('worklog', $worklog, $worklogform, false);
    }
    
}
?>