<?php

function xcontact_perm() {
    return array('xcontact company dropdown');
}

function xcontact_preprocess_node(&$variables) {
    $node = $variables['node'];
    if (xproject_is_xproject($node->type)) {
        array_unshift($variables['template_files'], 'node-xcontact');
    }
}

function xcontact_theme_registry_alter(&$variables) {
    // Check for xproject provided templates just before we use the default node.tpl.php
    array_splice($variables['node']['theme paths'], 1, 0, drupal_get_path('module', 'xcontact'). '/theme');
}

/**
 * Implementation of hook_form_alter().
 */
function xcontact_form_alter(&$form, &$form_state, $form_id) {
    if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
        $node = $form['#node'];
        if (xcontact_is_xcontact($node->type)) {
            $form = array_merge($form, xcontact_contact_form($node, $form_state));
            
            // Don't trample on custom label.
			if (isset($form['title']) && $form['title']['#title'] == t('Title'))
			 {
				$form['title']['#title'] = t('Contact Name');
			 }
            if (isset($form['body_field']) && $form['body_field']['body']['#title'] == t('Body')) 	
			{
                $form['body_field']['body']['#title'] = t('Contact Description');
            }
            
//            $form['author']['name']['#title'] = t('Creator');
        
        
        
        }
    } elseif ($form_id == 'node_type_form') {
        $form['xcontact'] = array(
          '#type' => 'fieldset',
          '#title' => t('xContact'),
          '#group' => 'additional_settings',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#weight' => 32,
        );
        $form['xcontact']['xcontact_use'] = array(
          '#type' => 'checkbox',
          '#title' => t('Use this content type as a contact'),
          '#default_value' => variable_get('xcontact_use_'. $form['#node_type']->type, FALSE),
        );
    }
}

function xcontact_contact_form($node, $form_state) {
    $form = array();
    
    if(xcontact_is_xcontact($node->type) == false) {
        return $form;
    }
    $node = (array)$node;
    $node += array(
        'nid' => NULL,
    );
    $node = (object)$node;
    $form['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
    $options = xcontact_get_companies();
    if(count($options) > 0) {
    	$form['selectcompany'] = array(
    		'#type' => 'select', 
    		'#title' => t('Select Company'), 
    		'#description' => t('Select Company or enter new in next field to add a new company'), 
    		'#default_value' =>$node->company, 
    		'#options' => xcontact_get_companies(),
        );
    }
    $form['company'] = array(
		'#type' => 'textfield', 
		'#title' => t('Company'), 
		'#default_value' =>$node->company, 
		'#size' =>60 , 
		'#maxlength' => 255, 
    );
    $form['alert_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Alert Email'),
        '#default_value' => $node->alert_email,
        '#size' => 60,
        '#maxlength' => 255,
        '#description' => t('The email address for task and worklog alerts to be sent to.'),
    );
    
    return $form;
}
/**
 * Implementation of hook_nodeapi().
 */
function xcontact_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
    global $user;
    
    if(xcontact_is_xcontact($node->type) == true) {
    	$data = array();
        switch ($op) {
            case 'view':
                $node->content['xcontact'] = array(
                  '#node' => $node,
                  '#weight' => -3,
                  '#value' => theme('xcontact', $node),
                );
                break;
            case 'load':
                $result = db_query('SELECT * FROM xcontact WHERE nid = '.$node->nid);
                if($row = db_fetch_array($result)) {
                    return $row;
                }
                break;
            case 'validate':
                break;
            case 'presave':
			if($node->company=='')
				$node->company=$node->selectcompany;
                break;
            case 'delete':
				$success = xcontact_delete_contact($node->nid);
				if(!$success)
					drupal_set_message('Error deleting xcontact','error');
                break;
            case 'insert':
            case 'update':
                // will check for nid, so same code for both insert and update
                
               
                $data = xcontact_get_contact($node->nid);
                
                if(isset($data->nid)) {
			        drupal_write_record('xcontact', $node,'nid');
                } else {
                    // xproject record not yet created, do so now (ex: content item after xprojects turned on for that node type)
    			    drupal_write_record('xcontact', $node);
                }
                break;
            case 'search result':
                break;
            case 'rss item':
                break;
        }
	}
}

/**
 * Implementation of hook_node_type().
 * Rename or delete the settings variable if a type changes.
 */
function xcontact_node_type($op, $info) {
    switch ($op) {
        case 'delete':
            variable_del('xcontact_use_'. $info->type);
            variable_del('xcontact_'. $info->type);
            break;
        case 'update':
            if (!empty($info->old_type) && $info->old_type != $info->type) {
                if (xcontact_is_xcontact($info->old_type)) {
                    $settings = variable_get('xcontact_'. $info->old_type, array());
                    variable_del('xcontact_use_'. $info->old_type);
                    variable_del('xcontact_'. $info->old_type);
                    variable_set('xcontact_use_'. $info->type, 1);
                    variable_set('xcontact_'. $info->type, $settings);
                }
            }
            break;
    }
}


function xcontact_get_types() {
    $types = node_get_types();
    foreach ($types as $type) {
        $return[] = $type->type;
    }
    return isset($return) ? $return : array();
}

function xcontact_is_xcontact($type) {
    if (is_object($type)) {
        $type = $type->type;
    }
    return variable_get('xcontact_use_'. $type, FALSE);
}

function xcontact_delete_contact($nid) {
    if ($nid) {
        $result = db_query('DELETE FROM xcontact WHERE nid = '.$nid);
        if($result) {
            return true;
        } else {
			return false;
        }
	}
}
function xcontact_get_contact($nid) {
    $data = array();
    if ($nid) {
        $result = db_query('SELECT * FROM xcontact WHERE nid = '.$nid);
        if($row = db_fetch_array($result)) {
            return $row;
        }
	}
    return array();
}

function xcontact_get_companies()
{
    $data = array();
    $result = db_query('SELECT DISTINCT company FROM xcontact ORDER BY company');
    while($row = db_fetch_array($result)) {
        $company = $row['company'];
        $data[$company] = $company;
    }
    return $data;
		
}

function xcontact_get_all_contacts($format = 'companies') {

    $sql = "SELECT a.nid, a.title, b.company FROM node a LEFT JOIN xcontact b ON b.nid = a.nid WHERE a.type = 'xcontact' ORDER BY b.company, a.title";
    $result = db_query($sql);

    $data = array();
    $_company = '';
    while($row = db_fetch_array($result)) {
        switch($format) {
            case 'simple':
                $data[$row['nid']] = $row['title'] ;
                break;
            case 'companies':
                $data[$row['nid']] = ($row['company'] ? $row['company'].' - ' : '').$row['title'] ;
                break;
        }
    }
    return $data;
}

function xcontact_get_my_contacts($format = 'companies') {
    global $user;
    $sql = "SELECT a.nid, a.title, b.company FROM node a LEFT JOIN xcontact b ON b.nid = a.nid WHERE a.type = 'xcontact' AND a.uid = %d ORDER BY b.company, a.title";
    $result = db_query($sql, $user->uid);

    $data = array();
    $_company = '';
    while($row = db_fetch_array($result)) {
        switch($format) {
            case 'simple':
                $data[$row['nid']] = $row['title'] ;
                break;
            case 'companies':
                $data[$row['nid']] = ($row['company'] ? $row['company'].' - ' : '').$row['title'] ;
                break;
        }
    }
    return $data;
}

/**
 * Implementation of hook_theme().
 */
function xcontact_theme() {
    $path = drupal_get_path('module', 'xproject');
    return array(
        'xcontact' => array(
            'template' => 'xcontact',
            'arguments' => array('node' => false),
            'path' => "$path/theme",
        ),
    );
}

?>