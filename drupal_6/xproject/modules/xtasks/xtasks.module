<?php

function xtasks_init() {
    // We have to perform a load in order to assure that the ajax/javascript bits are present.
    
    drupal_add_css(drupal_get_path('module', 'xproject'). '/theme/xtasks.css');
    drupal_add_js(drupal_get_path('module', 'xproject'). '/js/xtasks.js');
    drupal_add_js('misc/collapse.js');
}

function xtasks_perm() {
    return array('xtask access', 'xtasks critical path', 'create tasks', 'edit tasks', 'delete tasks');
/*
    return array(
        'create tasks' => array(
          'title' => t('create project tasks'), 
          'description' => t('Permission to create tasks'),
        ),
      );
*/
}

function xtasks_task_access($xtaskid, $op = 'xtask access') {
    
    global $user;
    
    $taskinfo = get_task_detail($xtaskid);
    
    $projectnode = node_load($taskinfo['xprojectid']);
    
    if($projectnode->uid == $user->uid) return true;
    
    if(user_access('xproject administration')) return true;
    
    if($taskinfo['taskprivate'] == false) {
        if(!$projectnode->private) return user_access($op);
        // get team...
        $teamlist = teamlist_getall_members($projectnode->nid);
        foreach($teamlist as $teaminfo) {
            if($teaminfo->uid == $user->uid) {
                return user_access($op);
            }
        }
    } else {
        if($user->xcontact == $taskinfo['owner']
            || $user->xcontact == $taskinfo['assigned_to']
            || $user->xcontact == $taskinfo['assigned_by']) {
            
            return true;   
        }
    
    }
    
    return false;
}

function xtasks_menu() {
    $items = array();
    
	$items['node/%xproject_node/tasklist'] = array(
    	'title' => 'Task List',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'xtasks_page',
        'page arguments' => array(1),
        'access arguments' => array('xtask access'),
    );
    $items['node/%xproject_node/tasks/%/edit'] = array(
    	'title' => 'Edit Task',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1, 3),
        'access callback' => 'xtasks_task_access',
        'access arguments' => array(3, 'edit tasks'),
    );
    $items['node/%xproject_node/tasks/%/delete'] = array(
    	'title' => 'Delete Task',
    	'type' => MENU_CALLBACK,
    	'weight' => 20,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_confirm_form', 3),
        'access callback' => 'xtasks_task_access',
        'access arguments' => array(3, 'delete tasks'),
    );
    $items['node/%xproject_node/tasklist/%/decr_importance'] = array(
		'page callback' => 'xtasks_importance_decr',
        'page arguments' => array(3),
		'access arguments' => array('xtask access'),
		'title' =>'Increment Task Importance',
		'type' => MENU_CALLBACK,
	);
    $items['node/%xproject_node/tasklist/%/incr_importance'] = array(
		'page callback' => 'xtasks_importance_incr',
        'page arguments' => array(3),
		'access arguments' => array('xtask access'),
		'title' =>'Increment Task Importance',
		'type' => MENU_CALLBACK,
	);
    $items['node/%xproject_node/tasklist/%/decr_priority'] = array(
		'page callback' => 'xtasks_priority_decr',
        'page arguments' => array(3),
		'access arguments' => array('xtask access'),
		'title' =>'Increment Task Priority',
		'type' => MENU_CALLBACK,
	);
    $items['node/%xproject_node/tasklist/%/incr_priority'] = array(
		'page callback' => 'xtasks_priority_incr',
        'page arguments' => array(3),
		'access arguments' => array('xtask access'),
		'title' =>'Increment Task Priority',
		'type' => MENU_CALLBACK,
	);
	$items['node/%xproject_node/tasklist/active'] = array(
    	'title' => 'Task List',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'xtasks_page',
        'page arguments' => array(1, 0, 'Active'),
        'access arguments' => array('xtask access'),
    );
	$items['node/%xproject_node/criticalpath'] = array(
    	'title' => 'Critical Path',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 20,
    	'page callback' => 'xtasks_criticalpath',
        'page arguments' => array(1),
        'access arguments' => array('xtasks critical path'),
    );
	$items['node/%xproject_node/addtask'] = array(
    	'title' => 'Task List',
    	'type' => MENU_CALLBACK,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1),
        'access arguments' => array('create tasks'),
    );
	$items['node/%xproject_node/addtask/%'] = array(
    	'title' => 'Task List',
    	'type' => MENU_CALLBACK,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1, false, 3),
        'access arguments' => array('create tasks'),
    );
    /* not yet ready
    $items['xtasks'] = array(
		'page callback' => 'xtasks_page',
		'access arguments' => array('xtask access'),
		'title' =>'Tasks',
		'type' => MENU_NORMAL_ITEM ,
		'weight' => 10
	);
    */
    $items['xtasks/%'] = array(
		'page callback' => 'xtasks_display_page',
        'page arguments' => array(1),
		'access arguments' => array('xtask access'),
		'title' =>'Display Task Details',
		'type' => MENU_CALLBACK,
	);
	
    $items['xtasks/bulkupdate'] = array(
		'page callback' => 'xtasks_bulkupdate',
		'access arguments' => array('xtask access'),
		'title' =>'Tasks Bulk Update',
		'type' => MENU_CALLBACK ,
	);
	
    return $items;
}
function xtask_node_load($tid) {

	if (is_numeric($tid)) {
		$node = get_task_detail($tid);
            return $node;
        }
	return FALSE;
}


function xtasks_form($form_state, $projectinfo, $taskid = 0, $parent_taskid = 0) {
    global $user;
    
    if(!isset($projectinfo->projectstatus)) $projectinfo->projectstatus = variable_get('xproject_default_projectstatus', 'Active');
    if(!isset($projectinfo->importance)) $projectinfo->importance = variable_get('xproject_default_importance', 5);
    if(!isset($projectinfo->priority)) $projectinfo->priority = variable_get('xproject_default_priority', 5);
    if(!isset($projectinfo->show_hours_or_days)) $projectinfo->show_hours_or_days = variable_get('xproject_show_hours_or_days', 'Hours');

    $form['xprojectid'] = array('#type' => 'hidden', '#value' => $projectinfo->nid);
    
    if($parent_taskid > 0 && $taskid == 0) {
        $form['parent_taskid'] = array('#type' => 'hidden', '#value' => $parent_taskid);
    }
    
    if($parent_taskid == true) {
        $parent_taskinfo = get_task_detail($parent_taskid);
        $parent_parent_taskid = $parent_taskinfo['parent_taskid'];
    }
    
    if($taskid == true) {
        $data = get_task_detail($taskid);
        $form['taskid'] = array(
            '#type' => 'hidden', 
            '#value' => $taskid,
        );
        
        $parent_taskid = $data['parent_taskid'];

    } elseif($parent_taskid == true) {
        $data['taskstatus'] = $parent_taskinfo['taskstatus'];
        $data['taskimportance'] = $parent_taskinfo['taskimportance'];
        $data['taskpriority'] = $parent_taskinfo['taskpriority'];
        $data['taskprivate'] = $parent_taskinfo['taskprivate'];
        if($parent_taskinfo['taskprivate'] == false) {
            drupal_set_message(t('This task will be published.'), 'status');
        }
        $data['planned_start_date'] = $parent_taskinfo['planned_start_date'];
        $data['tasktype'] = 'Task';
    } else {
        $data['taskstatus'] = $projectinfo->projectstatus;
        $data['taskimportance'] = $projectinfo->importance;
        $data['taskpriority'] = $projectinfo->priority;
        $data['taskprivate'] = $projectinfo->private;
        if($projectinfo->private == false) {
            drupal_set_message(t('This task will be published.'), 'status');
        }
        $data['tasktype'] = 'Task';
    }
        
    $form['task'] = array(
        '#type' => 'fieldset',
        '#title' => '<strong>'.($taskid ? t('Edit Tasks') : t('Create Task')).'</strong>',
        '#collapsible' => false,
        '#collapsed' => false,
    );
    
    $form['task']['taskname'] = array(
        '#type' => 'textfield', 
        '#title' => t('Task Name'),
        '#default_value' => $data['taskname'], 
        '#required' => TRUE,
    );
    
    $form['task']['details'] = array(
        '#type' => 'fieldset',
        '#title' => 'Task Details',
        '#collapsible' => true,
        '#collapsed' => false,
    );
    
    if(user_access('xproject administration') || variable_get('xproject_default_status_workflow', 0) == false) {
        $form['task']['details']['taskstatus'] = array(
            '#type' => 'select', 
            '#title' => t('Status'), 
            '#default_value' => $data['taskstatus'], 
            '#options' => array(
                'Draft' => t('Draft'), 
                'Pending' => t('Pending'), 
                'Active' => t('Active'),
                'Completed' => t('Completed'),
                'Archived' => t('Archived'),
            ), 
            '#description' => t('Status of task'),
            '#prefix' => '<div class="project-field-row">',
        );
    }
            
  	$form['task']['details']['taskimportance'] = array(
        '#type' => 'select', 
        '#title' => t('Importance'), 
        '#default_value' => $data['taskimportance'], 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Overall level of task importance'),
    );
  	$form['task']['details']['taskpriority'] = array(
        '#type' => 'select', 
        '#title' => t('Priority'), 
        '#default_value' => $data['taskpriority'], 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Current priority of the task'),
        '#suffix' => '<div class="clear"></div></div>',
    );
    
    $form['task']['details']['taskdetails'] = array(
        '#type' => 'textarea', 
        '#title' => 'Detailed Task Notes', 
        '#default_value' => $data['taskdetails'], 
        '#rows' => 5, 
    );
    
    
    $form['task']['details']['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced Options'),
        '#collapsible' => true,
        '#collapsed' => true,
    );
    
    $form['task']['details']['advanced']['taskorder'] = array(
        '#type' => 'textfield', 
        '#title' => t('Order'),
        '#size' => 6,
        '#default_value' => $data['taskorder'],
        '#description' => t('The task order will be automatically calculated if you do not set it.'),
    );

    $form['task']['details']['advanced']['tasktype'] = array(
        '#type' => 'select', 
        '#title' => t('Type'), 
        '#default_value' => (!$taskid ? 'Task' : $data['tasktype']), 
        '#options' => array(
            'Task' => t('Task'), 
            'Milestone' => t('Milestone'), 
            'Parent Task' => t('Parent Task'),
//            'ToDo' => t('ToDo'),
        ), 
        '#description' => t('Task type. (milestones have only a start date and no hours, parent tasks do not have their own hours and sub-tasks do not have their own dates)'),
    );
    
	$form['task']['details']['advanced']['taskprivate'] = array(
		'#type' =>'checkbox', 
		'#title' => t('Private'),
		'#default_value' => $data['taskprivate'],
        '#description' => t('Private tasks cannot be viewed by anyone but the task owner. Other team members may view private tasks in public projects.'),
    );
    
    $parent_tasks = xtasks_get_tasklist($projectinfo->nid, $parent_parent_taskid, false);
    $dependency_task_options = array(0 => '-select task-');
    $task_options = array(0 => '-select task-');
    foreach($parent_tasks as $_parent_task) {
        $task_options[$_parent_task['taskid']] = $_parent_task['taskname'];
        if($parent_taskid == 0) {
            $dependency_task_options[$_parent_task['taskid']] = $_parent_task['taskname'];
        }
        if($parent_taskid && $_parent_task['taskid'] == $parent_taskid) {
            $sibling_tasks = xtasks_get_tasklist($projectinfo->nid, $parent_taskid, false);
            foreach($sibling_tasks as $sibling_task) {
                $task_options[$sibling_task['taskid']] = ' - '.$sibling_task['taskname'];
                $dependency_task_options[$sibling_task['taskid']] = $sibling_task['taskname'];
            }
        }
    }
    if($taskid) {
        unset($task_options[$taskid]);
        unset($dependency_task_options[$taskid]);
    }
    
    
    
    if(count($task_options) > 1) { // first option is 'none'
        if($taskid > 0) {
        	$form['task']['details']['advanced']['parent_taskid'] = array(
                '#type' => 'select', 
                '#title' => t('Parent Task'), 
                '#options' => $task_options,
        		'#default_value' => $data['parent_taskid'], 
                '#description' => t('The parent task selected will collect and summarize hours data for this task.'),
            );
        }
        if(count($dependency_task_options) > 1) { // first option is 'none'
	    	$form['task']['details']['advanced']['dependency_taskid'] = array(
	            '#type' => 'select', 
	            '#title' => t('Depends on task'), 
	            '#options' => $dependency_task_options,
	    		'#default_value' => $data['dependency_taskid'], 
	            '#description' => t('When the selected task is Completed, this task will become Active and the Actual Start Date will be set.'),
	        );
	    }
    }

    $contactlist = xteam_get_all_contacts('simple', $projectinfo->nid);
    if(count($contactlist) > 0) {
        $form['task']['details']['teamlist'] = array(
            '#type' => 'fieldset',
            '#title' => t('Task Ownership'),
            '#collapsible' => true,
            '#collapsed' => true,
        );

        $xproject_departments_vid = variable_get('xproject_departments_vid', NULL);
        if($xproject_departments_vid) {
            $termlist = taxonomy_get_tree($xproject_departments_vid);

            $dept_options = array(0 => t('None Selected'));
            foreach($termlist as $terminfo) {
                $dept_options[$terminfo->tid] = $terminfo->name;
            }
            if(count($dept_options) > 0) {
            	$form['task']['details']['teamlist']['department'] = array(
            		'#type' => 'select', 
            		'#title' => t('Select a Department'), 
    //        		'#description' => t('Select Company or enter new in next field to add a new company'), 
            		'#default_value' => $data['department'], 
            		'#options' => $dept_options,
                );
            }
        }
        
        $form['task']['details']['teamlist']['owner'] = array(
            '#type' => 'select', 
            '#title' => t('Owner'), 
            '#options' => $contactlist,
    		'#default_value' => $taskid ? $data['owner'] : $user->default_contactid, 
            '#description' => t('Who the task was requested by; who can approve the task to be closed.'),
            '#prefix' => '<div class="project-field-row">',
        );
    	$form['task']['details']['teamlist']['assigned_by'] = array(
            '#type' => 'select', 
            '#title' => t('Assigned by'), 
            '#options' => $contactlist,
    		'#default_value' => $taskid ? $data['assigned_by'] : $user->default_contactid,
            '#description' => t('Who the task was last assigned by; who the task will be returned to for review.'),
        );
    	$form['task']['details']['teamlist']['assigned_to'] = array(
            '#type' => 'select', 
            '#title' => t('Assigned to'), 
            '#options' => $contactlist,
    		'#default_value' => $taskid ? $data['assigned_to'] : $user->default_contactid, 
            '#description' => t('Who the task is currently assigned to.'),
            '#suffix' => '<div class="clear"></div></div>',
        );
    } else {
        if($projectinfo->enable_team) {
            $form['task']['details']['teamlist'] = array(
                '#type' => 'item',
                '#title' => t('Team Members'),
                '#value' => t('Please add some team members to the project for assigning tasks to'),
                '#description' => t('You may need to create contact records for your team members before you can add them.'),
            );
        }
    }        
    
    // dates for subtasks are only shown as output, not fields
    if($parent_taskid == false || $data['tasktype'] != 'Task') {
        $date_field_type = 'date_select';
    } else {
        $date_field_type = 'item';
    }
    
        $form['task']['details']['task_dates'] = array(
            '#type' => 'fieldset',
            '#title' => t('Task Dates'),
            '#collapsible' => true,
            '#collapsed' => true,
        );
        
    	$form['task']['details']['task_dates']['duration'] = array(
    		'#type' => 'textfield', 
    		'#title' => t('Duration'), 
    		'#default_value' =>$data['duration'] , 
    		'#size' =>2 , 
    		'#maxlength' => 4,
            '#description' => t('Total days expected for task to take.'),
        );
        
    if($parent_taskid > 0 && $data['tasktype'] == 'Task' && $parent_taskinfo['planned_start_date'] != '0000-00-00 00:00:00') {
        $form['task']['details']['task_dates']['#description'] = t('Dates will be inherited from the parent task and updated based on duration for the task.');
    }
    
        $format = 'Y-m-d';
    
        if($projectinfo->approve_tasks_to_close == true) {
        	$form['task']['details']['task_dates']['date_approved'] = array(
        		'#type' => $date_field_type, 
        		'#title' => 'Date Approved', 
        		'#default_value' => $data['date_approved'], 
        		'#description' => '',
                '#required' => false,
                '#date_timezone' => date_default_timezone_name(),
                '#date_year_range' => '-3:+3',
                '#date_increment' => 15,
                '#date_format' => $format,
            );
        }
        // start on dependent task end date
        // start on parent task start date
        // start on project start date
//        if($date_field_type == 'item' && (!empty($data['planned_start_date']) || !empty($data['planned_end_date'])) {
        	$form['task']['details']['task_dates']['planned_start_date'] = array(
        		'#type' => $date_field_type, 
        		'#title' => 'Planned Start Date', 
        		'#default_value' => $data['planned_start_date'], 
        		'#description' => $data['planned_start_date'],
                '#required' => false,
                '#date_timezone' => date_default_timezone_name(),
                '#date_year_range' => '-3:+3',
                '#date_increment' => 15,
                '#date_format' => $format,
                '#date_label_position' => 'within',
                '#prefix' => '<div class="project-field-row">',
            );
            
        	$form['task']['details']['task_dates']['planned_end_date'] = array(
        		'#type' => $date_field_type, 
        		'#title' => 'Planned End Date', 
        		'#default_value' => '', 
        		'#description' => '',
                '#required' => false,
                '#date_timezone' => date_default_timezone_name(),
                '#date_year_range' => '-3:+3',
                '#date_increment' => 15,
                '#date_format' => $format,
                '#date_label_position' => 'within',
                '#suffix' => '<div class="clear"></div></div>',
            );
//        }
        if($taskid) {
        	$form['task']['details']['task_dates']['actual_start_date'] = array(
        		'#type' => $date_field_type, 
        		'#title' => 'Actual Start Date', 
        		'#default_value' => $data['actual_start_date'], 
        		'#description' => '',
                '#required' => false,
                '#date_timezone' => date_default_timezone_name(),
                '#date_year_range' => '-3:+3',
                '#date_increment' => 15,
                '#date_format' => $format,
                '#date_label_position' => 'within',
                '#prefix' => '<div class="project-field-row">',
            );
        	$form['task']['details']['task_dates']['actual_end_date'] = array(
        		'#type' => $date_field_type, 
        		'#title' => 'Actual End Date', 
        		'#default_value' => $data['actual_end_date'], 
        		'#description' => '',
                '#required' => false,
                '#date_timezone' => date_default_timezone_name(),
                '#date_year_range' => '-3:+3',
                '#date_increment' => 15,
                '#date_format' => $format,
                '#date_label_position' => 'within',
                '#suffix' => '<div class="clear"></div></div>', );	
        }
    
//    if($data['ttlsubtasks'] == false || $data['tasktype'] == 'Task') {
    if($data['tasktype'] == 'Task') {
        $form['task']['details']['task_hours'] = array(
            '#type' => 'fieldset',
            '#title' => t('Task Hours'),
            '#collapsible' => true,
            '#collapsed' => true,
        );
        if($taskid == true) {
            $form['task']['details']['task_hours']['#description'] = t('Task hours will automatically be updated by worklog entries. Manually changing hours will not automatically be applied to parent tasks or projects.');
        } else {
            $form['task']['details']['task_hours']['#description'] = t('Hours remaining will default to hours planned if left blank.');
        }
    	$form['task']['details']['task_hours']['hours_planned'] = array(
    		'#type' => 'textfield', 
    		'#title' => t('Hours Planned'), 
    		'#default_value' =>$data['hours_planned'] , 
    		'#size' =>6 , 
    		'#maxlength' => 16,
            '#prefix' => '<div class="project-field-row">', );
    	$form['task']['details']['task_hours']['hours_spent'] = array(
    		'#type' => 'textfield', 
    		'#title' => t('Hours Spent'), 
    		'#default_value' => $taskid == true ? $data['hours_spent'] : 0,
    		'#size' =>6 , 
    		'#maxlength' => 16, );
    	$form['task']['details']['task_hours']['hours_remaining'] = array(
    		'#type' => 'textfield', 
    		'#title' => t('Hours Remaining'), 
    		'#default_value' =>$data['hours_remaining'] , 
    		'#size' =>6 , 
    		'#maxlength' => 16,
            '#suffix' => '<div class="clear"></div></div>', );	
    }
//    print_r($projectinfo);
    if($projectinfo->show_hours_or_days == 'Days') {
        $form['task']['details']['task_hours']['#title'] = t('Task Days');
    	$form['task']['details']['task_hours']['hours_planned']['#title'] = t('Days Planned');
    	$form['task']['details']['task_hours']['hours_spent']['#title'] = t('Days Spent');
    	$form['task']['details']['task_hours']['hours_remaining']['#title'] = t('Days Remaining');
    }
     
    $form['task']['submit'] = array(
        '#type' => 'submit', 
        '#value' => t('Save')
    );
    
    $form['task']['submit']['#suffix'] = ' <input class="ajax-form-cancel" type="button" value="Cancel" />';

    return $form;
}

function xtasks_form_submit($form, &$form_state) {

    $projectinfo = node_load($form_state['values']['projectid']);
//print_r($form_state['values']);
    if($form_state['values']['planned_start_date'] == false) $form_state['values']['planned_start_date'] = '0000-00-00 00:00:00';
    if($form_state['values']['planned_end_date'] == false) $form_state['values']['planned_end_date'] = '0000-00-00 00:00:00';
    if($form_state['values']['actual_start_date'] == false) $form_state['values']['actual_start_date'] = '0000-00-00 00:00:00';
    if($form_state['values']['actual_end_date'] == false) $form_state['values']['actual_end_date'] = '0000-00-00 00:00:00';
    if($form_state['values']['date_approved'] == false) $form_state['values']['date_approved'] = '0000-00-00 00:00:00';
//    $form_state['values']['planned_start_date'] = xproject_convert_date2string($form_state['values']['planned_start_date']);
//    $form_state['values']['planned_end_date'] = xproject_convert_date2string($form_state['values']['planned_end_date']);
//    $form_state['values']['actual_start_date'] = xproject_convert_date2string($form_state['values']['actual_start_date']);
//    $form_state['values']['actual_end_date'] = xproject_convert_date2string($form_state['values']['actual_end_date']);
//    $form_state['values']['date_approved'] = xproject_convert_date2string($form_state['values']['date_approved']); 
    
    if($projectinfo->show_hours_or_days == 'Days') {
        $form_state['values']['hours_planned'] = $form_state['values']['hours_planned'] * $projectinfo->hours_per_day;
        $form_state['values']['hours_spent'] = $form_state['values']['hours_spent'] * $projectinfo->hours_per_day;
        $form_state['values']['hours_remaining'] = $form_state['values']['hours_remaining'] * $projectinfo->hours_per_day;
    }
//print_r($form_state); die('test');
    // adjust planned dates to match the task depended on, if it's dates are set...
    if(isset($form_state['values']['dependency_taskid'])) {
        $dependency_task = get_task_detail($form_state['values']['dependency_taskid']);
        
        if($dependency_task['planned_end_date'] != false) {
            $form_state['values']['planned_start_date'] = $dependency_task['planned_end_date'];
            if($form_state['values']['planned_start_date'] == true && $form_state['values']['planned_end_date'] == true) {
                $time_diff = strtotime($form_state['values']['planned_end_date']) - strtotime($form_state['values']['planned_start_date']);
                $form_state['values']['planned_end_date'] = date('Y-m-d', strtotime($form_state['values']['planned_start_date']) + $time_diff);
            }
        }
    }

    // adjust dependent task planned dates
    // need to use a function that can run recursively
    xtasks_update_dependent_tasks($form_state['values']['taskid']);
    
    if(isset($form_state['values']['taskid'])) {
    
        // must reset dependent task if parent task was changed...
        $orig_taskinfo = get_task_detail($form_state['values']['taskid']);
        if($orig_taskinfo['parent_taskid'] != $form_state['values']['parent_taskid']) {
            $form_state['values']['dependency_taskid'] = 0;
        }
    
        if(($orig_taskinfo['taskstatus'] == 'Draft' || $orig_taskinfo['taskstatus'] == 'Pending') 
                && $form_state['values']['taskstatus'] == 'Active' 
                && $form_state['values']['actual_start_date'] == '0000-00-00 00:00:00') {
            $form_state['values']['actual_start_date'] = date('Y-m-d');
        }
    
        if($orig_taskinfo['taskstatus'] == 'Active' 
                && $form_state['values']['taskstatus'] == 'Complete' 
                && $form_state['values']['actual_end_date'] == '0000-00-00 00:00:00') {
            $form_state['values']['actual_end_date'] = date('Y-m-d');
        }
    
		drupal_write_record('xtasks', $form_state['values'],'taskid');
		drupal_set_message('Task updated');
    
        $taskinfo = get_task_detail($form_state['values']['taskid']);

        if($form_state['values']['parent_taskid']) {
            $parent_task = node_load($form_state['values']['parent_taskid']);
            if($parent_task->field_tasktype[0]['value'] == 'Task') {
                $parent_task->field_tasktype[0]['value'] = 'Parent Task';
                node_save($parent_task);
            }
        
            $projectinfo = node_load($taskinfo['projectid']);
            $delta_hours_planned = $form_state['values']['hours_planned'] - $taskinfo['hours_planned'];
            $delta_hours_spent = $form_state['values']['hours_spent'] - $taskinfo['hours_spent'];
            $delta_hours_remaining = $form_state['values']['hours_remaining'] - $taskinfo['hours_remaining'];
            if($form_state['values']['parent_taskid'] != $taskinfo['parent_taskid']) {
                // TODO: update both previous and current task hours accordingly, for either the parent task or the project
            
            } else {
                // update parent task dates with subtask hours, parent task will update project hours
                xtasks_update_parent_task($form_state['values']['parent_taskid'], $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining);
            }
            
        } else {
            // update project hours, since no parent task is going to do so
            xproject_update_project_hours($form_state['values']['xprojectid'], $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining);  
        }
        if($orig_taskinfo['ttlsubtasks'] > 0) {
            xtasks_update_child_tasks(
                $orig_taskinfo['xprojectid'], 
                $orig_taskinfo['taskid'], 
                $form_state['values']['planned_start_date'], 
                $form_state['values']['planned_end_date']);
        }
    } else {
        $now = time();
        
        // if planned start date is in the past for a new task, assume task has started and set actual start date to planned start date
        $planned_start_date = strtotime($form_state['values']['planned_start_date']);
        if($form_state['values']['actual_start_date'] == false && $planned_start_date <= $now) {
            $form_state['values']['actual_start_date'] = $form_state['values']['planned_start_date'];  
        }

        // if planned end date is in the past for a new task, assume task has ended and set actual end date to planned end date
        $planned_end_date = strtotime($form_state['values']['planned_end_date']);
        if($form_state['values']['actual_end_date'] == false && $planned_end_date <= $now) {
            $form_state['values']['actual_end_date'] = $form_state['values']['planned_end_date'];  
        }
		drupal_write_record('xtasks', $form_state['values']);
    	drupal_set_message('A new task has been created.');

        if($form_state['values']['parent_taskid']) {
            // update parent task dates with subtask hours, parent task will update project hours
            $taskinfo = get_task_detail($form_state['values']['taskid']);
            xtasks_update_parent_task($form_state['values']['parent_taskid'], $form_state['values']['hours_planned'], $form_state['values']['hours_spent'], $form_state['values']['hours_remaining']);
        } else {
            // update project hours, since no parent task is going to do so
            xproject_update_project_hours($form_state['values']['xprojectid'], $form_state['values']['hours_planned'], $form_state['values']['hours_spent'], $form_state['values']['hours_remaining']);
        }
	}
//    print_r($form_state['values']); die('test'); 
    // trigger updates
    xtasks_notify($taskinfo['taskid']);
}

function xtasks_update_dependent_tasks($taskid) {
    
    if($taskid == false) return;
    
    $parent_taskinfo = get_task_detail($taskid);
    
    drupal_set_message('Updating dependent tasks for '.$parent_taskinfo['taskname']);
    
    $sql = 'SELECT a.*, COUNT(b.taskid) as ttlsubtasks 
            FROM xtasks a 
            LEFT JOIN xtasks b ON b.parent_taskid = a.taskid 
            WHERE a.dependency_taskid = %d 
            GROUP BY a.taskid 
            ORDER BY a.dependency_taskid, a.taskstatus, a.planned_start_date, a.planned_end_date, a.taskpriority, a.taskimportance, a.taskname';
            
    $result = db_query($sql, $taskid);
    $tasklist = array();
    
    while($taskinfo = db_fetch_array($result)) {
        
        
        // adjust planned dates to match the task depended on, if it's dates are set...
        
        if($parent_taskinfo['planned_end_date'] != false) {
            $taskinfo['planned_start_date'] = $parent_taskinfo['planned_end_date'];
            if($taskinfo['planned_start_date'] == true && $taskinfo['planned_end_date'] == true) {
                $time_diff = strtotime($taskinfo['planned_end_date']) - strtotime($taskinfo['planned_start_date']);
                $taskinfo['planned_end_date'] = date('Y-m-d', strtotime($taskinfo['planned_start_date']) + $time_diff);
            }
            drupal_write_record('xtasks', $taskinfo, 'taskid');
            drupal_set_message('Dependent task dates updated');
            xtasks_update_dependent_tasks($taskinfo['taskid']);
        }
    }
}


function xtasks_activate_task($taskid) {
    // - auto-activate (submitted) non-dependent top-level tasks when project is made active
    // need to also activate subtasks... write an activate_task function that cascades through subs?

    
    $taskinfo = get_task_detail($taskid);
    
    $taskinfo['taskstatus'] = 'Active';
    $taskinfo['actual_start_date'] = date('Y-m-d');
    
    drupal_write_record('xtasks', $taskinfo, 'taskid');

    $tasklist = xtasks_get_tasklist($taskinfo['xprojectid'], $taskid, false);
    $dateapproved = time();
    foreach($tasklist as $taskinfo) {
        if($taskinfo['taskstatus'] == 'Pending'
            && $taskinfo['dependency_taskid'] == 0
            && $dateapproved > strtotime($taskinfo['planned_start_date'])) {
            
            xtasks_activate_task($taskinfo['taskid']);
        }
    
    }
}

function xtasks_bulkupdate() {
    // dont' bother trying to hook_form_submit this one, it's all nested in a table...
    $xtask_action = $_POST['xtask_action'];
    $xtaskid_list = $_POST['xtasklist'];
    $destination = $_POST['destination'];
    foreach($xtaskid_list as $xtaskid) {
        $taskinfo = get_task_detail($xtaskid);
        if($taskinfo) {
            switch($xtask_action) {
                case 'status_active':
                    $taskinfo['taskstatus'] = 'Active';
                    drupal_write_record('xtasks', $taskinfo, 'taskid');
                
                
                    break;

                case 'status_pending':
                    $taskinfo['taskstatus'] = 'Pending';
                    drupal_write_record('xtasks', $taskinfo, 'taskid');
                
                    break;

                case 'status_draft':
                    $taskinfo['taskstatus'] = 'Draft';
                    drupal_write_record('xtasks', $taskinfo, 'taskid');
                
                    break;

                case 'delete':
                    if(user_access('delete tasks')) {
                    	xtasks_delete_task($taskinfo['taskid']);
                    }
                    break;

                case 'archive':
                    if(user_access('delete tasks')) {
                        $taskinfo['taskstatus'] = 'Archived';
                        drupal_write_record('xtasks', $taskinfo, 'taskid');
                    }
                    break;

                case 'publish':
                    $taskinfo['taskprivate'] = 0;
                    drupal_write_record('xtasks', $taskinfo, 'taskid');
                    break;

                case 'private':
                    $taskinfo['taskstatus'] = 1;
                    drupal_write_record('xtasks', $taskinfo, 'taskid');
                    break;
            }        
            
        }
    }
    
    drupal_goto($destination);    
}

function xtasks_notify($taskid) {
    global $user;
    
    if($taskid == false) return;
    
    $taskinfo = get_task_detail($taskid);
    
    $ownerinfo = node_load($taskinfo['owner']);
    
    $assigned_by = node_load($taskinfo['assigned_by']);
    
    $assigned_to = node_load($taskinfo['assigned_to']);
    
    $projectinfo = node_load($taskinfo['xprojectid']);

    $subject = 'New Task for '.$projectinfo->title;
    
    // create the text version of the email body
    $body_text = "A new task has been created for the project: ".$projectinfo->title.".\n\n";
    $body_text .= "Task: ".$taskinfo['taskname']."\n\n";
    $body_text .= 'Assigned to '.$assigned_to->title.' by '.$assigned_by->title."\n\n";
    $body_text .= $taskinfo['taskdetails'].'\n\n';
    $body_text .= $projectinfo->path;
    
    // create an html version of the email
    $body_html = str_replace("\n", "<br>", $body_text);

    
    $params = array();
    $params['account'] = $user;
    $params['xproject'] = $projectinfo;
    $params['xtask'] = $taskinfo;
    $params['subject'] = $subject;
    $params['bodytext'] = $body_text;

    // send email
    /* these should each be covered by the teamlist loop that follows...
    if(!empty($ownerinfo->alert_email)) {
        $to = $ownerinfo->alert_email;
        drupal_mail('xworklog', 'notice', $to, user_preferred_language($user), $params);
    }
    if(!empty($assigned_by->alert_email) && $assigned_by->nid != $ownerinfo->nid) {
        $to = $assigned_by->alert_email;
        drupal_mail('xworklog', 'notice', $to, user_preferred_language($user), $params);
    }
        
    if(!empty($assigned_to->alert_email) && $assigned_to->nid != $ownerinfo->nid && $assigned_to->nid != $assigned_by->nid) {
        $to = $assigned_to->alert_email;
        drupal_mail('xworklog', 'notice', $to, user_preferred_language($user), $params);
    }
    */    
    $teamlist = xteam_get_all_contacts($format = 'companies', $taskinfo['xprojectid']);
    foreach($teamlist as $team_nid => $team_member) {
        if($taskinfo['private'] == false || $team_nid == $taskinfo['owner'] || $team_nid == $taskinfo['assigned_by'] || $team_nid == $taskinfo['assigned_to']) {
            $memberinfo = node_load($team_nid);
            if(!empty($memberinfo->alert_email) && $memberinfo->instant_alerts == 1 && $memberinfo->uid != $user->uid) {
                $to = $memberinfo->alert_email;
                drupal_mail('xtasks', 'notice', $to, user_preferred_language($user), $params);
            }
        }        
    }
    drupal_set_message('Task updates have been sent.');
}


function xtasks_mail($key, &$message, $params) {
    $data['user'] = $params['account'];
    $options['language'] = $message['language'];
    user_mail_tokens($variables, $data, $options);
    switch($key) {
        case 'notice':
            $langcode = $message['language']->language;
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['bodytext'];
            break;
    }
}

function xtasks_update_parent_task($taskid, $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining) {
    $taskinfo = get_task_detail($taskid);
    
    drupal_set_message('Updating parent task: '.$taskinfo['taskname']);
//    $taskinfo['planned_start_date'] = xproject_convert_date2string($taskinfo['planned_start_date']);
//    $taskinfo['planned_end_date'] = xproject_convert_date2string($taskinfo['planned_end_date']);
//    $taskinfo['actual_start_date'] = xproject_convert_date2string($taskinfo['actual_start_date']);
//    $taskinfo['actual_end_date'] = xproject_convert_date2string($taskinfo['actual_end_date']);
//    $taskinfo['date_approved'] = xproject_convert_date2string($taskinfo['date_approved']); 
    if($taskinfo) {
        $taskinfo['hours_planned'] += $delta_hours_planned;
        $taskinfo['hours_spent'] += $delta_hours_spent;
        $taskinfo['hours_remaining'] += $delta_hours_remaining;
        $taskinfo['tasktype'] = 'Parent Task';
        
        drupal_write_record('xtasks', $taskinfo, 'taskid');
        drupal_set_message('Parent Task Updated');
        if($taskinfo['parent_taskid']) {
            return xtasks_update_parent_task($taskinfo['parent_taskid'], $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining);
        } else {
    //    print_r($taskinfo);
            // update project
            xproject_update_project_hours($taskinfo['xprojectid'], $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining);
        }
    }
}

function xtasks_update_child_tasks($projectid, $parenttaskid, $planned_start_date, $planned_end_date) {
    
    if($parenttaskid) $taskinfo = get_task_detail($parenttaskid);
    
//    $taskinfo['planned_start_date'] = xproject_convert_date2string($taskinfo['planned_start_date']);
//    $taskinfo['planned_end_date'] = xproject_convert_date2string($taskinfo['planned_end_date']);
//    $taskinfo['actual_start_date'] = xproject_convert_date2string($taskinfo['actual_start_date']);
//    $taskinfo['actual_end_date'] = xproject_convert_date2string($taskinfo['actual_end_date']);
//    $taskinfo['date_approved'] = xproject_convert_date2string($taskinfo['date_approved']); 

    if($parenttaskid) {
        $sql = 'SELECT * FROM xtasks WHERE parent_taskid = %d';
        $result = db_query($sql, $parenttaskid);
    } else {
        $sql = 'SELECT * FROM xtasks WHERE xprojectid = %d AND parent_taskid IS NULL';
        $result = db_query($sql, $projectid);
    }
    $ttl = 0;
    while($taskinfo = db_fetch_array($result)) {
    
        // if dates are both equal (because both blank, frequently), no update required
        $taskinfo['planned_start_date'] = $planned_start_date;
        $taskinfo['planned_end_date'] = $planned_end_date;
        
        drupal_write_record('xtasks', $taskinfo, 'taskid');
        $ttl++;
        xtasks_update_child_tasks($projectid, $taskinfo['taskid'], $planned_start_date, $planned_end_date);
    }
    if($ttl > 0) drupal_set_message('Sub-Tasks Updated');
        
    return true;
}
            
function get_task_detail($taskid)
{    
    if($taskid == false) return;
    
    $sql = 'SELECT a.*, COUNT(b.taskid) as ttlsubtasks FROM xtasks a LEFT JOIN xtasks b ON b.parent_taskid = a.taskid WHERE a.taskid = %d GROUP BY b.parent_taskid';
    $result = db_query($sql, $taskid);
    if($row = db_fetch_array($result)) {
        if($row['date_approved'] == '0000-00-00 00:00:00') $row['date_approved'] = NULL;
        if($row['planned_start_date'] == '0000-00-00 00:00:00') $row['planned_start_date'] = NULL;
        if($row['planned_end_date'] == '0000-00-00 00:00:00') $row['planned_end_date'] = NULL;
        if($row['actual_start_date'] == '0000-00-00 00:00:00') $row['actual_start_date'] = NULL;
        if($row['actual_end_date'] == '0000-00-00 00:00:00') $row['actual_end_date'] = NULL;
    	return $row;
    }
}

/**
 * Implementation of hook_theme().
 */
function xtasks_theme() 
{
    $path = drupal_get_path('module', 'xproject');
    return array(
        'tasklist' => array(
            'template' => 'tasklist',
            'arguments' => array('projectinfo' => false, 'tasklist' => false, 'newtasklink' => false, 'parentid' => false, 'filter_form' => false, 'depth' => false, 'team_prefs' => false, 'team_msg' => false, 'num_prefix' => false),
            'path' => "$path/theme",
        ),
        'taskdetails' => array(
            'template' => 'taskdetails',
            'arguments' => array('taskdetails' => false),
            'path' => "$path/theme",
        ),
        'criticalpath' => array(
            'template' => 'criticalpath',
            'arguments' => array('tasklist' => false),
            'path' => "$path/theme",
        ),
        'subpath' => array(
            'template' => 'subpath',
            'arguments' => array('tasklist' => false),
            'path' => "$path/theme",
        ),
        'taskfilter' => array(
            'template' => 'taskfilter',
            'arguments' => array('projectid' => false, 'status_filter' => false),
            'path' => "$path/theme",
        ),
    );
}



function xtasks_cron() {
    // get list of (projects? or users?)
    $cron_priorities = variable_get('cron_priorities', false);
    if($cron_priorities) {
        $projectlist = array();
        $result = db_query('SELECT * FROM xproject');
        while($row = db_fetch_array($result)) {
            $update_priorities = true;
            
            $result2 = db_query('SELECT COUNT(*) as ttl FROM xtasks WHERE xprojectid = %d AND taskpriority <= 1 AND taskstatus = "Active"');
            $row2 = db_fetch_array($result2);
            if($row2['ttl'] == 0) {
    
                $update_priorities = false;
                break;
            }
                
            if($update_priorities) {
                $sql3 = "UPDATE xtasks SET taskpriority = taskpriority - 1 WHERE xprojectid = %d AND taskstatus = 'Active'";
                $result3 = db_query($sql3, $row['nid']);
            }
        }
        // get list of tasks in project, order by priority
        // if no pri:1's, decrement each task priority
        // 
    	watchdog('actions', 'xTasks Priorities Updated.');
    }    

}

function xtasks_get_tasklist($projectid, $parentid = 0, $include_subtasks = false, $exclude_private = false, $status_filter = array()) {
    global $user;
    
    $statuscolor_draft = variable_get('statuscolor_draft', '');
    $statuscolor_pending = variable_get('statuscolor_pending', '');
    $statuscolor_active = variable_get('statuscolor_active', '');
    $statuscolor_completed = variable_get('statuscolor_completed', '');
    $statuscolor_archived = variable_get('statuscolor_archived', '');
    $statuscolor_pri1 = variable_get('statuscolor_pri1', '');
    $statuscolor_late = variable_get('statuscolor_late', '');
    
    $projectnode = node_load($projectid);

    $current_date = time(); // date('Y-m-d H:i:s');
    $statuscolor_warning = variable_get('statuscolor_warning', '');
    $warning_date = $current_date - ($projectnode->warning_lead * 24 * 3600);
    
    $teamlist = teamlist_getall_members($projectnode->nid);
    
    $is_admin = user_access('xproject administration');
    
    $xtask_auth_access = user_access('xtask access');
    
    $sql = 'SELECT a.*, COUNT(b.taskid) as ttlsubtasks 
            FROM xtasks a 
            LEFT JOIN xtasks b ON b.parent_taskid = a.taskid 
            WHERE a.xprojectid = %d 
            AND a.parent_taskid = %d';
    if(count($status_filter) > 0) {
        $sql .= ' AND a.taskstatus IN ("'.implode('","', $status_filter).'")';
    }
    $sql .= ' AND a.dependency_taskid = 0';
    if($exclude_private) {
        $sql .= ' AND a.taskprivate = 0';
    }
    $sql .= ' GROUP BY a.taskid 
            ORDER BY a.dependency_taskid, a.taskstatus, a.planned_start_date, a.planned_end_date, a.taskpriority, a.taskimportance, a.taskname';

    $result = db_query($sql, $projectid, $parentid);
    $_tasklist = array(); // temporary tasklist, will be rebuilt merged with subtasks after initial build
    
    $contactlist = array();
    
    while($taskinfo = db_fetch_array($result)) {
    
        // security check
        $has_access = false;
        
        $task_color = '';
        
        if($projectnode->uid == $user->uid) $has_access = true;
        
        if($is_admin) $has_access = true;
        
        if($taskinfo['taskprivate'] == false) {
            if(!$projectnode->private) $has_access = $xtask_auth_access;

            // get team...
            foreach($teamlist as $teaminfo) {
                if($teaminfo->uid == $user->uid) {
                    if($xtask_auth_access) {
                        $has_access = true;
                    }
                }
            }
        } else {
            if($user->xcontact == $taskinfo['owner']
                || $user->xcontact == $taskinfo['assigned_to']
                || $user->xcontact == $taskinfo['assigned_by']) {
                
                $has_access = true;   
            }
        
        }
        
        if($has_access) {
            if($taskinfo['owner'] > 0 && !isset($contactlist[$taskinfo['owner']])) {
                $contactlist[$taskinfo['owner']] = node_load($taskinfo['owner']);
            }
            $taskinfo['owner_name'] = $contactlist[$taskinfo['owner']]->title;
            
            if($taskinfo['assigned_to'] > 0 && !isset($contactlist[$taskinfo['assigned_to']])) {
                $contactlist[$taskinfo['assigned_to']] = node_load($taskinfo['assigned_to']);
            }
            $taskinfo['assigned_to_name'] = $contactlist[$taskinfo['assigned_to']]->title;
            
            if($taskinfo['assigned_by'] > 0 && !isset($contactlist[$taskinfo['assigned_by']])) {
                $contactlist[$taskinfo['assigned_by']] = node_load($taskinfo['assigned_by']);
            }
            $taskinfo['assigned_by_name'] = $contactlist[$taskinfo['assigned_by']]->title;
            
            $taskinfo['planned_start_time'] = strtotime($taskinfo['planned_start_date']);
            $taskinfo['planned_end_time'] = strtotime($taskinfo['planned_end_date']);
            $taskinfo['actual_start_time'] = strtotime($taskinfo['actual_start_date']);
            $taskinfo['actual_end_time'] = strtotime($taskinfo['actual_end_date']);
            
            switch($taskinfo['taskstatus']) {
                case 'Draft':
                    $task_color = $statuscolor_draft;
                    break;
                case 'Pending':
                    $task_color = $statuscolor_pending;
                    break;
                case 'Active':
                    $task_color = $statuscolor_active;
                    break;
                case 'Completed':
                    $task_color = $statuscolor_completed;
                    break;
                case 'Archived':
                    $task_color = $statuscolor_archived;
                    break;
            }
        
            if($warning_date < strtotime($taskinfo['planned_end_date'])) {
//            echo '<div>'.date('Y-m-d H:i:s', $warning_date).' - '.$taskinfo['planned_end_date'].'</div>';
                $task_color = $statuscolor_warning;
            }
            if(!in_array($taskinfo['taskstatus'], array('Completed', 'Archived'))) {
                if($taskinfo['taskpriority'] == 1) {
                    $task_color = $statuscolor_pri1;
                }
                if($current_date < strtotime($taskinfo['planned_end_date']) && strtotime($taskinfo['planned_end_date']) > -1) {
                    $task_color = $statuscolor_late;
                }
            }
            $taskinfo['task_color'] = $task_color;
            
            if($taskinfo['ttlsubtasks'] > 0 && $include_subtasks == true) {
                $taskinfo['subtasks'] = xtasks_get_tasklist($projectid, $taskinfo['taskid'], $include_subtasks, $exclude_private, $status_filter);
            }
            // build 
            $_tasklist[] = $taskinfo;
        }        
    
    }
    $tasklist = array();
    foreach($_tasklist as $taskinfo) {
        $tasklist['taskid_'.$taskinfo['taskid']] = $taskinfo;
        $tasklist = array_merge($tasklist, xtasks_get_dependent_tasks($taskinfo['taskid'], $include_subtasks));
    }
    
    return $tasklist;
}

function xtasks_get_dependent_tasks($parentid, $include_subtasks = false) {

    $sql = 'SELECT a.*, COUNT(b.taskid) as ttlsubtasks 
            FROM xtasks a 
            LEFT JOIN xtasks b ON b.parent_taskid = a.taskid 
            WHERE a.dependency_taskid = %d 
            GROUP BY a.taskid 
            ORDER BY a.dependency_taskid, a.taskstatus, a.planned_start_date, a.planned_end_date, a.taskpriority, a.taskimportance, a.taskname';
            
    $result = db_query($sql, $parentid);
    $tasklist = array();
    
    while($taskinfo = db_fetch_array($result)) {
        if($taskinfo['ttlsubtasks'] > 0 && $include_subtasks == true) {
            $taskinfo['subtasks'] = xtasks_get_tasklist($projectid, $taskinfo['taskid']);
        }
        // build 
        $tasklist['taskid_'.$taskinfo['taskid']] = $taskinfo;
        $tasklist = array_merge($tasklist, xtasks_get_dependent_tasks($taskinfo['taskid'], $include_subtasks));
    
    }
    
    return $tasklist;
}

function xtasks_get_dependent_tasklist($taskid) {
//    $sql = "SELECT * FROM xtasks WHERE xprojectid = %d AND parent_taskid = %d ORDER BY taskname";
    $sql = 'SELECT a.*, COUNT(b.taskid) as ttlsubtasks FROM xtasks a LEFT JOIN xtasks b ON b.parent_taskid = a.taskid WHERE a.dependency_taskid = %d GROUP BY a.taskid';
    $result = db_query($sql, $taskid);
    $tasklist = array();
//echo $sql . ' '.$projectid . ' '.$parentid;
    while($taskinfo = db_fetch_array($result)) {
        $tasklist['taskid_'.$taskinfo['taskid']] = $taskinfo;
    
    }
    
    return $tasklist;
}

function xtasks_criticalpath($projectinfo) {
    
    $tasklist = xtasks_get_tasklist($projectinfo->nid, 0, true, true);
    
    foreach($tasklist as $taskinfo) {
        
    
    }

    return theme('criticalpath', $tasklist);
}

// function xtasks_get_top


function xtasks_page($projectinfo, $parentid = 0, $status_filter = array(), $depth = 0, $team_msg = '', $class_stack = array(), $num_prefix = '')
{
    global $user;
//die('parentid: '.$parentid);
    $current_url = drupal_get_path_alias($_GET['q']);
    if($parentid == 0 && $depth == 0) {
        if($_POST['status_filter']) {
            $_SESSION['status_filter'] = $_POST['status_filter'];
            $status_filter = $_SESSION['status_filter'];
        } elseif($_POST['form_id'] != 'xtasks_filter_form' && $_SESSION['status_filter'] == true) {
            $status_filter = $_SESSION['status_filter'];
        } else {
            $status_filter = array('Draft', 'Pending', 'Active', 'Completed', 'Archived');
            $_SESSION['status_filter'] = $status_filter;
        }
//        $status_filter = $_POST['status_filter'] ? $_POST['status_filter'] : array('Draft', 'Pending', 'Active', 'Completed', 'Archived');
    
        $contactlist = xteam_get_all_contacts('companies', $projectinfo->nid);
        if(count($contactlist) <= 0) {
            $team_msg = t('Your project does not currently have any team members. Please add team members to your project.');
        }
    }
    
    if($user->uid) {
        $myprofile = content_profile_load('xcontact', $user->uid);
    	$xcontactid = $myprofile->nid; // $user->xcontact;
        $team_prefs = xteam_get_contact($projectinfo->nid, $xcontactid);
    }
            
    $tasks = xtasks_get_tasklist($projectinfo->nid, $parentid, false, false, $status_filter);
    $tasklist = array();
    
    $num = 1;
    foreach($tasks as $taskinfo) {
    
        $task_class = $class_stack;
        $task_class[] = 'task_row_'.strtolower($taskinfo['taskstatus']);
        $taskinfo['task_class'] = implode(' ', $task_class);
    
        if(($taskinfo['hours_spent'] + $taskinfo['hours_remaining']) > 0) {
            $taskinfo['progress'] = (int)(100 * $taskinfo['hours_spent'] / ($taskinfo['hours_spent'] + $taskinfo['hours_remaining'])).'%';
            if($taskinfo['hours_planned']) {
                $taskinfo['delta_progress'] = $taskinfo['hours_planned'] / ($taskinfo['hours_spent'] + $taskinfo['hours_remaining']);
            }
        } else {
            $taskinfo['delta_progress'] = '0%';
        }
        if($taskinfo['assigned_to']) {
            $taskinfo['assigned_to_contact'] = node_load($taskinfo['assigned_to']);
        }        
		$taskinfo['worklog_div'] = 'workloglist'.$taskinfo['taskid'];

        if($taskinfo['ttlsubtasks'] > 0) {
            $taskinfo['expandlink'] = t('<img src="'.url('sites/all/modules/xproject/images/rotate.gif').'" alt="Expand" rel="xtask'.$taskinfo['taskid'].'subtasks" class="btn_task_expand"/>');
        }
        
        $taskinfo['tasklink'] = url('xtasks/'.$taskinfo['taskid']);

        if($projectinfo->projectstatus == 'Baseline') {
            $taskinfo['btn_imp_decr'] = '';
            $taskinfo['btn_imp_incr'] = '';
            $taskinfo['editlink'] = '';
            $taskinfo['deletelink'] = '';
            $taskinfo['newtasklink'] = '';
            $taskinfo['workloglink'] = '';
        
        } else {
            $taskinfo['btn_imp_decr'] = drupal_get_form('xtasks_btn_imp_decr_form', $taskinfo['taskid']);
            $taskinfo['btn_imp_incr'] = drupal_get_form('xtasks_btn_imp_incr_form', $taskinfo['taskid']);
            
            $edit_url = 'node/' . $projectinfo->nid . '/tasks/' . $taskinfo['taskid'] . '/edit';
            $taskinfo['editlink'] = l(t('<img src="'.url('sites/all/modules/xproject/images/16x16_edit.png').'" alt="Edit" />'),$edit_url, array(
                    'attributes' => array(
                        'class' => 'edittask',
                        'title' => t('Edit Task'),
                        'rel' => $taskinfo['worklog_div'],
                     ),
                    'query' => array(
                      'destination' => $current_url
                     ),
                     'html' => true,
                  ));
            
            $delete_url = 'node/' . $projectinfo->nid . '/tasks/' . $taskinfo['taskid'] . '/delete';
            $taskinfo['deletelink'] = l(t('<img src="'.url('sites/all/modules/xproject/images/16x16_delete.png').'" alt="Delete" />'),$delete_url, array(
                    'attributes' => array(
                        'class' => 'deletetask',
                        'title' => t('Delete Task'),
                        'rel' => $taskinfo['worklog_div'],
                     ),
                    'query' => array(
                        'destination' => $current_url
                     ),
                     'html' => true,
                	 
                  ));
              
            $newtask_url = 'node/' . $projectinfo->nid . '/addtask/' . $taskinfo['taskid'];
            $taskinfo['newtasklink'] = l(t('<img src="'.url('sites/all/modules/xproject/images/16x16_subtask.png').'" alt="New" />'),$newtask_url, array(
                        'attributes' => array(
                            'class' => 'newtask',
                            'title' => t('New Sub-Task'),
                            'rel' => $taskinfo['worklog_div'],
                        ),
                        'query' => array(
                            'destination' => $current_url,
                        ),
                     'html' => true,
                    ));
              
            $worklog_url = 'node/' . $projectinfo->nid . '/worklog/' . $taskinfo['taskid'] . '/showform';
            $taskinfo['workloglink'] = l(t('<img src="'.url('sites/all/modules/xproject/images/16x16_worklog.png').'" alt="Worklog" />'),$worklog_url, array(
                        'attributes' => array(
                            'class' => 'worklog',
                            'title' => t('Create Worklog'),
                            'rel' => $taskinfo['worklog_div'],
                        ),
                        'query' => array(
                            'destination' => $current_url,
                        ),
                     'html' => true,
                    ));
        }
        $subclass_stack = $class_stack;
        $subclass_stack[] = 'xtask'.$taskinfo['taskid'].'subtasks';
        if(!empty($num_prefix)) $sub_num_prefix = $num_prefix.'.'.$num;
        else $sub_num_prefix = $num;
        $taskinfo['subtasks'] = xtasks_page($projectinfo, $taskinfo['taskid'], $status_filter, $depth + 1, $team_msg, $subclass_stack, $sub_num_prefix);
        
        $taskinfo['num'] = $sub_num_prefix;
        $num++;
        
        $tasklist['taskid_'.$taskinfo['taskid']] = $taskinfo;
    }
    /*
    $parent_tasks = array();
    foreach($tasklist as $taskinfo) {
        if($taskinfo['parent_taskid'] > 0) {
            $parent_tasks[$taskinfo['parent_taskid']][$taskinfo['taskid']] = $taskinfo;
        }
    }
    foreach($parent_tasks as $parentid => $subtasklist) {
        if($taskinfo['parent_taskid'] > 0) {
            $tasklist[$taskinfo['parent_taskid']]['subtasks'][$taskinfo['taskid']] = $taskinfo;
        }
    }
    */          
    $newtask_url = 'node/' . arg(1) . '/addtask';
    $newtasklink = l('New Task',$newtask_url, array(
            'attributes' => array(
                'class' => 'newtasklink',
                'title' => 'taskform',
            ),
            'query' => array(
                'destination' => $current_url,
            ),
        ));
    
    if($parentid == false) {
        $filter_form = drupal_get_form('xtasks_filter_form', $projectid, $status_filter);
    }
            
    return theme('tasklist', $projectinfo, $tasklist, $newtasklink, $parentid, $filter_form, $depth, $team_prefs, $team_msg);
}


function xtasks_display_page($xtaskid) {
    $taskinfo = get_task_detail($xtaskid);
    $taskinfo['projectinfo'] = node_load($taskinfo['xprojectid']);
    if($taskinfo['owner']) {
        $taskinfo['owner_contact'] = node_load($taskinfo['owner']);
    }
    if($taskinfo['assigned_by']) {
        $taskinfo['assigned_by_contact'] = node_load($taskinfo['assigned_by']);
    }
    if($taskinfo['assigned_to']) {
        $taskinfo['assigned_to_contact'] = node_load($taskinfo['assigned_to']);
    }
    if($taskinfo['parent_taskid']) {
        $taskinfo['parent_taskinfo'] = get_task_detail($taskinfo['parent_taskid']);
    }
    if($taskinfo['dependency_taskid']) {
        $taskinfo['dependency_taskinfo'] = get_task_detail($taskinfo['dependency_taskid']);
    }
    $taskinfo['worklog'] = xworklog_page($taskinfo['projectinfo'], $xtaskid);
    
    return theme('taskdetails', $taskinfo);

}



function xtasks_filter_form($form_state, $projectid, $status_filter) {

    $current_url = drupal_get_path_alias($_GET['q']);
    
    $form['taskfilter'] = array('#type' => 'fieldset', '#title' => 'Task Filter');
    
    $form['taskfilter']['status_filter'] = array('#type' => 'checkboxes', '#multiple' => true, '#default_value' => $status_filter, '#options' => array('Draft' => 'Draft', 'Pending' => 'Pending', 'Active' => 'Active', 'Completed' => 'Completed', 'Archived' => 'Archived'));
    $form['taskfilter']['btnFilter'] = array('#type' => 'submit', '#value' => 'Filter');
    
    return $form;

}



function xtasks_confirm_form(){
    return confirm_form(array(),'Are you sure you want to delete this task?',isset($_GET['destination']) ? $_GET['destination'] : "","Confirm if you want to delete this task?");
}

function xtasks_confirm_form_submit(){
    if(arg(2) == 'tasks' && arg(4) == 'delete'){
    	$sql = 'DELETE FROM xtasks where taskid = '.arg(3);
    	$result = db_query($sql);
    	if($result) {
    		drupal_set_message('Deleted task');
    	} else {
    		drupal_set_message('Error deleting task','error');
        }
    }
}

function xtasks_delete_task($xtaskid) {
    $taskinfo = get_task_detail($xtaskid);
    if($taskinfo == false) return;
    
    $subtasks = xtasks_get_tasklist($taskinfo['xprojectid'], $xtaskid, false);
    
    foreach($subtasks as $subtaskinfo) {
        xtasks_delete_task($subtaskinfo['taskid']);
    }
    
    // and your little worklog entries too!!!
    

	$result = db_query('DELETE FROM xtasks where taskid = %d', $xtaskid);
	$result2 = db_query('DELETE FROM xworklog where xtaskid = %d', $xtaskid);
	if($result2) {
		drupal_set_message('Deleted task: '.$taskinfo['taskname']);
	} else {
		drupal_set_message('Error deleting task: '.$taskinfo['taskname'],'error');
    }


}

function xtasks_btn_imp_decr_form($xtaskid) {

    $form['submit'] = array(
        '#type' => 'image_button',
        '#value' => t('Decrease Importance'),
        '#src' => 'misc/arrow-desc.png',
    );
    
    return $form;

}

function xtasks_importance_decr($xtaskid) {
    $taskinfo = get_task_detail($xtaskid);
    if($taskinfo == false) return;
    
    // and your little worklog entries too!!!
    
    if($taskinfo['taskimportance'] < 9) {
    	$result = db_query('UPDATE xtasks SET taskimportance = taskimportance + 1 WHERE taskid = %d', $xtaskid);
    	if($result) {
    		drupal_set_message('Task importance incremented: '.$taskinfo['taskname']);
    	} else {
    		drupal_set_message('Error decrementing task: '.$taskinfo['taskname'],'error');
        }
    }
    $destination = drupal_get_destination();
    
    if($destination == false) $destination = url('node/'.$taskinfo['xprojectid'].'/tasklist');
    else {
        $_destination = explode('=', $destination);
        $destination = urldecode($_destination[1]);
    }
    drupal_goto($destination);
    
    
}

function xtasks_btn_imp_incr_form($xtaskid) {

    $form['submit'] = array(
        '#type' => 'image_button',
        '#value' => t('Increase Importance'),
        '#src' => 'misc/arrow-asc.png',
    );
    
    return $form;

}

function xtasks_importance_incr($xtaskid) {
    $taskinfo = get_task_detail($xtaskid);
    if($taskinfo == false) return;
    
    // and your little worklog entries too!!!
    

    if($taskinfo['taskimportance'] > 1) {
    	$result = db_query('UPDATE xtasks SET taskimportance = taskimportance - 1 WHERE taskid = %d', $xtaskid);
    	if($result) {
    		drupal_set_message('Task importance incremented: '.$taskinfo['taskname']);
    	} else {
    		drupal_set_message('Error decrementing task priority: '.$taskinfo['taskname'],'error');
        }
    }
    $destination = drupal_get_destination();
    
    if($destination == false) $destination = 'node/'.$taskinfo['xprojectid'].'/tasklist';
    else {
        $_destination = explode('=', $destination);
        $destination = urldecode($_destination[1]);
    }
    
    drupal_goto($destination);
}

function xtasks_priority_decr($xtaskid) {
    $taskinfo = get_task_detail($xtaskid);
    if($taskinfo == false) return;
    
    // and your little worklog entries too!!!
    

    if($taskinfo['taskpriority'] < 9) {
    	$result = db_query('UPDATE xtasks SET taskpriority = taskpriority + 1 WHERE taskid = %d', $xtaskid);
    	if($result) {
    		drupal_set_message('Task priority incremented: '.$taskinfo['taskname']);
    	} else {
    		drupal_set_message('Error decrementing task priority: '.$taskinfo['taskname'],'error');
        }
    }
    $destination = drupal_get_destination();
    
    if($destination == false) $destination = 'node/'.$taskinfo['xprojectid'].'/tasklist';
    else {
        $_destination = explode('=', $destination);
        $destination = urldecode($_destination[1]);
    }
    
    drupal_goto($destination);
}

function xtasks_priority_incr($xtaskid) {
    $taskinfo = get_task_detail($xtaskid);
    if($taskinfo == false) return;
    
    // and your little worklog entries too!!!
    

    if($taskinfo['taskpriority'] < 9) {
    	$result = db_query('UPDATE xtasks SET taskpriority = taskpriority - 1 WHERE taskid = %d', $xtaskid);
    	if($result) {
    		drupal_set_message('Task priority incremented: '.$taskinfo['taskname']);
    	} else {
    		drupal_set_message('Error decrementing task: '.$taskinfo['taskname'],'error');
        }
    }
    $destination = drupal_get_destination();
    
    if($destination == false) $destination = 'node/'.$taskinfo['xprojectid'].'/tasklist';
    else {
        $_destination = explode('=', $destination);
        $destination = urldecode($_destination[1]);
    }
    
    drupal_goto($destination);
}










function _xtasks_get_duration($xprojectid, $parent_taskid) {
    $chains = array();
    $sql = 'SELECT a.*, COUNT(b.taskid) as ttlsubtasks, COUNT(c.taskid) as dependents
                        FROM xtasks a 
                        LEFT JOIN xtasks b ON b.parent_taskid = a.taskid
                        LEFT JOIN xtasks c ON c.dependency_taskid = a.taskid
                        WHERE a.xprojectid = %d 
                        AND a.parent_taskid = %d
                        GROUP BY a.taskid 
                        HAVING dependents = 0';
    $result = db_query($sql, $xprojectid, $parent_taskid);

    // get chains
    while($taskinfo = db_fetch_array($result)) {
        if($taskinfo['ttlsubtasks'] > 0) {
            $chains[] = array(
                'tasklist' => array($taskinfo['taskid']), 
                'duration' => _xtasks_get_duration($xprojectid, $taskinfo['taskid']),
                'next_parentid' => $taskinfo['dependency_taskid'],
            );
        } else {
    
            $chains[] = array(
                'tasklist' => array($taskinfo['taskid']),
                'duration' => $taskinfo['duration'],
                'next_parentid' => $taskinfo['dependency_taskid'],
            );
        }
    }
    
    // process each chain
    foreach($chains as &$chain) {
        while($chain['next_parentid'] > 0) {
            $parent_task = get_task_detail($chain['next_parentid']);
            if($parent_task['ttlsubtasks'] > 0) {
                
                $chain['duration'] += _xtasks_get_duration($xprojectid, $parent_task['taskid']);
                
            } else {
                $chain['duration'] += $parent_task['duration'];
            }
            $chain['next_parentid'] = $parent_task['dependency_taskid'];
            $chain['tasklist'][] = $parent_task['taskid'];
        }
    }

    uasort($chains, '_xtasks_duration_cmp');
      
    $criticalpath = current($chains);
    
    return $criticalpath['duration'];
}

function _xtasks_duration_cmp($a, $b) {
    if($a['duration'] == $b['duration']) return 0;
    return ($a['duration'] > $b['duration']) ? -1 : 1;
}


?>