<?php

function xtasks_init() {
    // We have to perform a load in order to assure that the ajax/javascript bits are present.
    
    drupal_add_css(drupal_get_path('module', 'xproject'). '/theme/xtasks.css');
    drupal_add_js(drupal_get_path('module', 'xproject'). '/js/xtasks.js');
    drupal_add_js('misc/collapse.js');
}

function xtasks_menu() {
    $items = array();
/*
    $items['xtasks/%xtask/xproject'] = array(
    	'title' => 'View Project',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('node_form', 1),
        'access arguments' => array('create tasks'),
    );
*/
    $items['node/%xproject_node/tasks/%/edit'] = array(
    	'title' => 'Edit Task',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1, 3),
        'access arguments' => array('create tasks'),
    );
    $items['node/%xproject_node/tasks/%/delete'] = array(
    	'title' => 'Delete Task',
    	'type' => MENU_CALLBACK,
    	'weight' => 20,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_confirm_form', 3),
        'access arguments' => array('create tasks'),
    );
	$items['node/%xproject_node/tasklist'] = array(
    	'title' => 'Task List',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'xtasks_page',
        'page arguments' => array(1),
        'access arguments' => array('xproject administration'),
    );
	$items['node/%xproject_node/addtask'] = array(
    	'title' => 'Task List',
    	'type' => MENU_CALLBACK,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1),
        'access arguments' => array('create tasks'),
    );
	$items['node/%xproject_node/addtask/%'] = array(
    	'title' => 'Task List',
    	'type' => MENU_CALLBACK,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1, false, 3),
        'access arguments' => array('create tasks'),
    );

    $items['xtasks'] = array(
		'page callback' => 'xtasks_page',
		'access arguments' => array('create tasks'),
		'title' =>'Tasks',
		'type' => MENU_NORMAL_ITEM ,
		'weight' => 10
	);
	
    return $items;
}
function xtask_node_load($tid) {

	if (is_numeric($tid)) {
		$node = get_task_detail($tid);
            return $node;
        }
	return FALSE;
}
function xtasks_perm() {
    return array('create tasks');
/*
    return array(
        'create tasks' => array(
          'title' => t('create project tasks'), 
          'description' => t('Permission to create tasks'),
        ),
      );
*/
}


function xtasks_form($form_state, $projectinfo, $taskid = 0, $parentid = 0) {
    global $user;

    $form['xprojectid'] = array('#type' => 'hidden', '#value' => $projectinfo->nid);
    
    if($parentid) {
        $form['parent_taskid'] = array('#type' => 'hidden', '#value' => $parentid);
    }
    
    if($taskid == true) {
        $data = get_task_detail($taskid);
        $form['taskid'] = array(
            '#type' => 'hidden', 
            '#value' => $taskid,
        );
    }
    
    $form['task'] = array(
        '#type' => 'fieldset',
        '#title' => $taskid ? t('Edit Task') : t('Create Task'),
        '#collapsible' => false,
        '#collapsed' => false,
    );
    
    $form['task']['taskname'] = array(
        '#type' => 'textfield', 
        '#title' => t('Task Name'),
        '#default_value' => $data['taskname'], 
        '#required' => TRUE,
    );
    
    $form['task']['details'] = array(
        '#type' => 'fieldset',
        '#title' => 'Task Details',
        '#collapsible' => true,
        '#collapsed' => true,
    );
    
    if(!isset($projectinfo->projectstatus)) $projectinfo->projectstatus = variable_get('xproject_default_projectstatus', 'Active');
    if(!isset($projectinfo->importance)) $projectinfo->importance = variable_get('xproject_default_importance', 5);
    if(!isset($projectinfo->priority)) $projectinfo->priority = variable_get('xproject_default_priority', 5);
    if(!isset($projectinfo->show_hours_or_days)) $projectinfo->show_hours_or_days = variable_get('xproject_show_hours_or_days', 'Hours');
    
    $form['task']['details']['taskstatus'] = array(
        '#type' => 'select', 
        '#title' => t('Status'), 
        '#default_value' => (!$taskid ? $projectinfo->projectstatus : $data['taskstatus']), 
        '#options' => array(
            'Draft' => t('Draft'), 
            'Pending' => t('Pending'), 
            'Active' => t('Active'),
            'Completed' => t('Completed'),
            'Archived' => t('Archived'),
        ), 
        '#description' => t('Status of task'),
        '#prefix' => '<div class="project-field-row">',
    );
        
  	$form['task']['details']['taskimportance'] = array(
        '#type' => 'select', 
        '#title' => t('Importance'), 
        '#default_value' => (!$taskid ? $projectinfo->importance : $data['taskimportance']), 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Overall level of task importance'),
    );
  	$form['task']['details']['taskpriority'] = array(
        '#type' => 'select', 
        '#title' => t('Priority'), 
        '#default_value' => (!$taskid ? $projectinfo->priority : $data['taskpriority']), 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Current priority of the task'),
        '#suffix' => '<div class="clear"></div></div>',
    );
    
    $form['task']['details']['taskdetails'] = array(
        '#type' => 'textarea', 
        '#title' => 'Detailed Task Notes', 
        '#default_value' => $data['taskdetails'], 
        '#rows' => 5, 
    );
    
    
    $form['task']['details']['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced Options'),
        '#collapsible' => true,
        '#collapsed' => true,
    );

    $form['task']['details']['advanced']['tasktype'] = array(
        '#type' => 'select', 
        '#title' => t('Type'), 
        '#default_value' => (!$taskid ? 'Task' : $data['taskstatus']), 
        '#options' => array(
            'Task' => t('Task'), 
            'Milestone' => t('Milestone'), 
            'Parent Task' => t('Parent Task'),
//            'ToDo' => t('ToDo'),
        ), 
        '#description' => t('Task type. (milestones have only a start date and no hours, parent tasks do not have their own hours and sub-tasks do not have their own dates)'),
    );
    
	$form['task']['details']['advanced']['taskprivate'] = array(
		'#type' =>'checkbox', 
		'#title' => t('Private'),
		'#default_value' => $data['taskprivate'],
        '#description' => t('Private tasks cannot be viewed by anyone but the task owner. Other team members may view private tasks in public projects.'),
    );
    $sibling_tasks = xtasks_get_tasklist($projectinfo->nid, $parentid, false);
    $task_options = array(0 => '-select task-');
    foreach($sibling_tasks as $sib_taskid => $sibling_task) {
        $task_options[$sib_taskid] = $sibling_task['taskname'];
    }
//    $sibling_tasks = xtasks_get_project_tasks($projectinfo->nid, $);
    if($taskid) unset($task_options[$taskid]);

    if(count($task_options) > 1) { // first option is 'none'
    	$form['task']['details']['advanced']['parent_taskid'] = array(
            '#type' => 'select', 
            '#title' => t('Parent Task'), 
            '#options' => $task_options,
    		'#default_value' => $data['parent_taskid'], 
            '#description' => t('The parent task selected will collect and summarize hours data for this task.'),
        );
    	$form['task']['details']['advanced']['dependency_taskid'] = array(
            '#type' => 'select', 
            '#title' => t('Depends on task'), 
            '#options' => $task_options,
    		'#default_value' => $data['dependency_taskid'], 
            '#description' => t('When the selected task is Completed, this task will become Active and the Actual Start Date will be set.'),
        );
    }
            
    $contactlist = xteam_get_all_contacts('companies', $projectinfo->nid);
    if(count($contactlist) > 0) {
        $form['task']['details']['teamlist'] = array(
            '#type' => 'fieldset',
            '#title' => t('Task Ownership'),
            '#collapsible' => true,
            '#collapsed' => true,
        );
        $form['task']['details']['teamlist']['owner'] = array(
            '#type' => 'select', 
            '#title' => t('Owner'), 
            '#options' => $contactlist,
    		'#default_value' => $taskid ? $data['owner'] : $user->xcontact, 
            '#description' => t('Who the task was requested by; who can approve the task to be closed.'),
            '#prefix' => '<div class="project-field-row">',
        );
    	$form['task']['details']['teamlist']['assigned_by'] = array(
            '#type' => 'select', 
            '#title' => t('Assigned by'), 
            '#options' => $contactlist,
    		'#default_value' => $taskid ? $data['assigned_by'] : $user->xcontact,
            '#description' => t('Who the task was last assigned by; who the task will be returned to for review.'),
        );
    	$form['task']['details']['teamlist']['assigned_to'] = array(
            '#type' => 'select', 
            '#title' => t('Assigned to'), 
            '#options' => $contactlist,
    		'#default_value' => $taskid ? $data['assigned_to'] : $user->xcontact, 
            '#description' => t('Who the task is currently assigned to.'),
            '#suffix' => '<div class="clear"></div></div>',
        );
    } else {
        if($projectinfo->enable_team) {
            $form['task']['details']['teamlist'] = array(
                '#type' => 'item',
                '#title' => t('Team Members'),
                '#value' => t('Please add some team members to the project for assigning tasks to'),
                '#description' => t('You may need to create contact records for your team members before you can add them.'),
            );
        }
    }        
    
    if($data['parent_taskid'] == false) {
        $form['task']['details']['task_dates'] = array(
            '#type' => 'fieldset',
            '#title' => t('Task Dates'),
            '#collapsible' => true,
            '#collapsed' => true,
        );
    	$form['task']['details']['task_dates']['date_approved'] = array(
    		'#type' => 'date', 
    		'#title' => 'Date Approved', 
    		'#default_value' => $data['date_approved'], 
    		'#description' => '',
        );
    	$form['task']['details']['task_dates']['planned_start_date'] = array(
    		'#type' => 'date', 
    		'#title' => 'Planned Start Date', 
    		'#default_value' => $data['planned_start_date'], 
    		'#description' => '',
            '#prefix' => '<div class="project-field-row">',
        );
    	$form['task']['details']['task_dates']['planned_end_date'] = array(
    		'#type' => 'date', 
    		'#title' => 'Planned End Date', 
    		'#default_value' => $data['planned_end_date'], 
    		'#description' => '',
            '#suffix' => '<div class="clear"></div></div>',
        );
    	$form['task']['details']['task_dates']['actual_start_date'] = array(
    		'#type' => 'date', 
    		'#title' => 'Actual Start Date', 
    		'#default_value' => $data['actual_start_date'], 
    		'#description' => '',
            '#prefix' => '<div class="project-field-row">',
        );
    	$form['task']['details']['task_dates']['actual_end_date'] = array(
    		'#type' => 'date', 
    		'#title' => 'Actual End Date', 
    		'#default_value' => $data['actual_end_date'], 
    		'#description' => '',
            '#suffix' => '<div class="clear"></div></div>', );	
    }
    
    if($data['ttlsubtasks'] == false) {
        $form['task']['details']['task_hours'] = array(
            '#type' => 'fieldset',
            '#title' => t('Task Hours'),
            '#collapsible' => true,
            '#collapsed' => true,
        );
        if($taskid == true) {
            $form['task']['details']['task_hours']['#description'] = t('Task hours will automatically be updated by worklog entries. Manually changing hours will not automatically be applied to parent tasks or projects.');
        } else {
            $form['task']['details']['task_hours']['#description'] = t('Hours remaining will default to hours planned if left blank.');
        }
    	$form['task']['details']['task_hours']['hours_planned'] = array(
    		'#type' => 'textfield', 
    		'#title' => t('Hours Planned'), 
    		'#default_value' =>$data['hours_planned'] , 
    		'#size' =>6 , 
    		'#maxlength' => 16,
            '#prefix' => '<div class="project-field-row">', );
    	$form['task']['details']['task_hours']['hours_spent'] = array(
    		'#type' => 'textfield', 
    		'#title' => t('Hours Spent'), 
    		'#default_value' => $taskid == true ? $data['hours_spent'] : 0,
    		'#size' =>6 , 
    		'#maxlength' => 16, );
    	$form['task']['details']['task_hours']['hours_remaining'] = array(
    		'#type' => 'textfield', 
    		'#title' => t('Hours Remaining'), 
    		'#default_value' =>$data['hours_remaining'] , 
    		'#size' =>6 , 
    		'#maxlength' => 16,
            '#suffix' => '<div class="clear"></div></div>', );	
    }
    print_r($projectinfo);
    if($projectinfo->show_hours_or_days == 'Days') {
        $form['task']['details']['task_hours']['#title'] = t('Task Days');
    	$form['task']['details']['task_hours']['hours_planned']['#title'] = t('Days Planned');
    	$form['task']['details']['task_hours']['hours_spent']['#title'] = t('Days Spent');
    	$form['task']['details']['task_hours']['hours_remaining']['#title'] = t('Days Remaining');
    }
     
    $form['task']['submit'] = array(
        '#type' => 'submit', 
        '#value' => t('Save')
    );

    return $form;
}

function xtasks_form_submit($form, &$form_state) {

    $projectinfo = node_load($form_state['values']['projectid']);

    $form_state['values']['planned_start_date'] = xproject_convert_date2string($form_state['values']['planned_start_date']);
    $form_state['values']['planned_end_date'] = xproject_convert_date2string($form_state['values']['planned_end_date']);
    $form_state['values']['actual_start_date'] = xproject_convert_date2string($form_state['values']['actual_start_date']);
    $form_state['values']['actual_end_date'] = xproject_convert_date2string($form_state['values']['actual_end_date']);
    $form_state['values']['date_approved'] = xproject_convert_date2string($form_state['values']['date_approved']); 
    
    if($projectinfo->show_hours_or_days == 'Days') {
        $form_state['values']['hours_planned'] = $form_state['values']['hours_planned'] * $projectinfo->hours_per_day;
        $form_state['values']['hours_spent'] = $form_state['values']['hours_spent'] * $projectinfo->hours_per_day;
        $form_state['values']['hours_remaining'] = $form_state['values']['hours_remaining'] * $projectinfo->hours_per_day;
    }
    
    if(isset($form_state['values']['taskid'])) {
		drupal_write_record('xtasks', $form_state['values'],'taskid');
		drupal_set_message('Task updated');
    
        if($form_state['values']['parent_taskid']) {
            $taskinfo = get_task_detail($form_state['values']['taskid']);
            $projectinfo = node_load($taskinfo['projectid']);
            $delta_hours_planned = $form_state['values']['hours_planned'] - $taskinfo['hours_planned'];
            $delta_hours_spent = $form_state['values']['hours_spent'] - $taskinfo['hours_spent'];
            $delta_hours_remaining = $form_state['values']['hours_remaining'] - $taskinfo['hours_remaining'];
            if($form_state['values']['parent_taskid'] != $taskinfo['parent_taskid']) {
                // update both previous and current task hours accordingly, for either the parent task or the project
            
            } else {
                // update parent task dates with subtask hours, parent task will update project hours
                xtasks_update_parent_task($taskinfo['parent_taskid'], $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining);
            }
            
        } else {
            // update project hours, since no parent task is going to do so
            xproject_update_project_hours($taskinfo['projectid'], $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining);  
        }
    } else {
        $now = time();
        $planned_start_date = strtotime($form_state['values']['planned_start_date']);
        if($form_state['values']['actual_start_date'] == false && $planned_start_date <= $now) {
            $form_state['values']['actual_start_date'] = $form_state['values']['planned_start_date'];  
        }
        $planned_end_date = strtotime($form_state['values']['planned_end_date']);
        if($form_state['values']['actual_end_date'] == false && $planned_end_date <= $now) {
            $form_state['values']['actual_end_date'] = $form_state['values']['planned_end_date'];  
        }
		drupal_write_record('xtasks', $form_state['values']);
    	drupal_set_message('A new task added');
    
        if($form_state['values']['parent_taskid']) {
            // update parent task dates with subtask hours, parent task will update project hours
            $taskinfo = get_task_detail($form_state['values']['taskid']);
            xtasks_update_parent_task($taskinfo['parent_taskid'], $taskinfo['hours_planned'], $taskinfo['hours_spent'], $taskinfo['hours_remaining']);
            
        } else {
            // update project hours, since no parent task is going to do so
            xproject_update_project_hours($taskinfo['projectid'], $taskinfo['hours_planned'], $taskinfo['hours_spent'], $taskinfo['hours_remaining']);
        }
	}
//    print_r($form_state['values']); die('test'); 
    // trigger updates
    $teamlist = xteam_get_all_contacts($format = 'companies', $projectid = 0);
}

function xtasks_update_parent_task($taskid, $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining) {
    $taskinfo = get_task_detail($taskid);
    $taskinfo['planned_start_date'] = xproject_convert_date2string($taskinfo['planned_start_date']);
    $taskinfo['planned_end_date'] = xproject_convert_date2string($taskinfo['planned_end_date']);
    $taskinfo['actual_start_date'] = xproject_convert_date2string($taskinfo['actual_start_date']);
    $taskinfo['actual_end_date'] = xproject_convert_date2string($taskinfo['actual_end_date']);
    $taskinfo['date_approved'] = xproject_convert_date2string($taskinfo['date_approved']); 
    $taskinfo['hours_planned'] += $delta_hours_planned;
    $taskinfo['hours_spent'] += $delta_hours_spent;
    $taskinfo['hours_remaining'] += $delta_hours_remaining;
    $taskinfo['tasktype'] = 'Parent Task';
    
    drupal_write_record('xtasks', $taskinfo, 'taskid');
    drupal_set_message('Parent Task Updated');
    
    if($taskinfo['parent_taskid']) {
        return xtasks_update_parent_task($taskid, $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining);
    } else {
        // update project
        xproject_update_project_hours($taskinfo['projectid'], $delta_hours_planned, $delta_hours_spent, $delta_hours_remaining);
    }
}
            
function get_task_detail($taskid)
{
    $sql = 'SELECT a.*, COUNT(b.taskid) as ttlsubtasks FROM xtasks a LEFT JOIN xtasks b ON b.parent_taskid = a.taskid WHERE a.taskid = %d GROUP BY b.parent_taskid';
    $result = db_query($sql, $taskid);
    if($row = db_fetch_array($result)) {
        $row['date_approved'] = xproject_convert_date2array($row['date_approved']);
        $row['planned_start_date'] = xproject_convert_date2array($row['planned_start_date']);
        $row['planned_end_date'] = xproject_convert_date2array($row['planned_end_date']);
        $row['actual_start_date'] = xproject_convert_date2array($row['actual_start_date']);
        $row['actual_end_date'] = xproject_convert_date2array($row['actual_end_date']);
    	return $row;
    }
}

/**
 * Implementation of hook_theme().
 */
function xtasks_theme() 
{
    $path = drupal_get_path('module', 'xproject');
    return array(
        'tasklist' => array(
            'template' => 'tasklist',
            'arguments' => array('tasklist' => false, 'newtasklink' => false, 'parentid' => false, 'depth' => false),
            'path' => "$path/theme",
        ),
    );
}

function xtasks_get_tasklist($projectid, $parentid, $include_subtasks = false) {
//    $sql = "SELECT * FROM xtasks WHERE xprojectid = %d AND parent_taskid = %d ORDER BY taskname";
    $sql = 'SELECT a.*, COUNT(b.taskid) as ttlsubtasks FROM xtasks a LEFT JOIN xtasks b ON b.parent_taskid = a.taskid WHERE a.xprojectid = %d AND a.parent_taskid = %d GROUP BY a.taskid';
    $result = db_query($sql, $projectid, $parentid);
    $tasklist = array();
//echo $sql . ' '.$projectid . ' '.$parentid;
    while($taskinfo = db_fetch_array($result)) {
        if($taskinfo['ttlsubtasks'] > 0 && $include_subtasks == true) {
            $taskinfo['subtasks'] = xtasks_get_tasklist($projectid, $taskinfo['taskid']);
        }
        $tasklist[$taskinfo['taskid']] = $taskinfo;
    
    }
    
    return $tasklist;
}

function xtasks_get_dependent_tasklist($taskid) {
//    $sql = "SELECT * FROM xtasks WHERE xprojectid = %d AND parent_taskid = %d ORDER BY taskname";
    $sql = 'SELECT a.*, COUNT(b.taskid) as ttlsubtasks FROM xtasks a LEFT JOIN xtasks b ON b.parent_taskid = a.taskid WHERE a.dependent_taskid = %d GROUP BY a.taskid';
    $result = db_query($sql, $taskid);
    $tasklist = array();
//echo $sql . ' '.$projectid . ' '.$parentid;
    while($taskinfo = db_fetch_array($result)) {
        $tasklist[$taskinfo['taskid']] = $taskinfo;
    
    }
    
    return $tasklist;
}

function xtasks_page($projectinfo, $parentid = 0, $depth = 0)
{
    
    $current_url = drupal_get_path_alias($_GET['q']);
    
    $tasks = xtasks_get_tasklist($projectinfo->nid, $parentid, false);
    $tasklist = array();
//print_r($tasks);
    foreach($tasks as $taskinfo) {
    
        if($taskinfo['hours_spent'] > 0 || $taskinfo['hours_remaining'] > 0) {
            $taskinfo['progress'] = (int)(100 * $taskinfo['hours_spent'] / ($taskinfo['hours_spent'] + $taskinfo['hours_remaining'])).'%';
            if($taskinfo['hours_planned']) {
                $taskinfo['delta_progress'] = $taskinfo['hours_planned'] / ($taskinfo['hours_spent'] + $taskinfo['hours_remaining']);
            }
        } else {
            $taskinfo['delta_progress'] = '0%';
        }
        if($taskinfo['assigned_to']) {
            $taskinfo['assigned_to_contact'] = node_load($taskinfo['assigned_to']);
        }        
		$taskinfo['worklog_div'] = 'workloglist'.$taskinfo['taskid'];

        $edit_url = 'node/' . $projectinfo->nid . '/tasks/' . $taskinfo['taskid'] . '/edit';
        $taskinfo['editlink'] = l(t('<img src="sites/all/modules/xproject/images/16x16_edit.png" />'),$edit_url, array(
                'attributes' => array(
                    'class' => 'edittask',
                    'title' => t('Edit Task'),
                    'rel' => $taskinfo['worklog_div'],
                 ),
                'query' => array(
                  'destination' => $current_url
                 ),
                 'html' => true,
              ));
        
        $delete_url = 'node/' . $projectinfo->nid . '/tasks/' . $taskinfo['taskid'] . '/delete';
        $taskinfo['deletelink'] = l(t('<img src="sites/all/modules/xproject/images/16x16_delete.png" />'),$delete_url, array(
                'attributes' => array(
                    'class' => 'deletetask',
                    'title' => t('Delete Task'),
                    'rel' => $taskinfo['worklog_div'],
                 ),
                'query' => array(
                    'destination' => $current_url
                 ),
                 'html' => true,
            	 
              ));
          
        $newtask_url = 'node/' . $projectinfo->nid . '/addtask/' . $taskinfo['taskid'];
        $taskinfo['newtasklink'] = l(t('<img src="sites/all/modules/xproject/images/16x16_subtask.png" />'),$newtask_url, array(
                    'attributes' => array(
                        'class' => 'newtask',
                        'title' => t('New Sub-Task'),
                        'rel' => $taskinfo['worklog_div'],
                    ),
                    'query' => array(
                        'destination' => $current_url,
                    ),
                 'html' => true,
                ));
          
        $worklog_url = 'node/' . $projectinfo->nid . '/worklog/' . $taskinfo['taskid'];
        $taskinfo['workloglink'] = l(t('<img src="sites/all/modules/xproject/images/16x16_worklog.png" />'),$worklog_url, array(
                    'attributes' => array(
                        'class' => 'worklog',
                        'title' => t('Create Worklog'),
                        'rel' => $taskinfo['worklog_div'],
                    ),
                    'query' => array(
                        'destination' => $current_url,
                    ),
                 'html' => true,
                ));
        $taskinfo['subtasks'] = xtasks_page($projectinfo, $taskinfo['taskid'], $depth + 1);
        $tasklist[$taskinfo['taskid']] = $taskinfo;
    }
    /*
    $parent_tasks = array();
    foreach($tasklist as $taskinfo) {
        if($taskinfo['parent_taskid'] > 0) {
            $parent_tasks[$taskinfo['parent_taskid']][$taskinfo['taskid']] = $taskinfo;
        }
    }
    foreach($parent_tasks as $parentid => $subtasklist) {
        if($taskinfo['parent_taskid'] > 0) {
            $tasklist[$taskinfo['parent_taskid']]['subtasks'][$taskinfo['taskid']] = $taskinfo;
        }
    }
    */          
    $newtask_url = 'node/' . arg(1) . '/addtask';
    $newtasklink = l('New Task',$newtask_url, array(
            'attributes' => array(
                'class' => 'newtasklink',
                'title' => 'taskform',
            ),
            'query' => array(
                'destination' => $current_url,
            ),
        ));
        
    return theme('tasklist', $tasklist, $newtasklink, $parentid, $depth);
}

function xtasks_confirm_form(){
    return confirm_form(array(),'Are you sure you want to delete this task?',isset($_GET['destination']) ? $_GET['destination'] : "","Confirm if you want to delete this task?");
}

function xtasks_confirm_form_submit(){
    if(arg(0) == 'xtasks' && arg(2) == 'delete'){
    	$sql = 'DELETE FROM xtasks where taskid = '.arg(1);
    	$result = db_query($sql);
    	if($result) {
    		drupal_set_message('deleted task');
    	} else {
    		drupal_set_message('Error deleting task','error');
        }
    }
}

function xtasks_get_project_tasks($xprojectid) {
	$sql='SELECT taskid, taskname FROM xtasks';
	if($xprojectid) {
		$sql .= ' WHERE xprojectid = ' .	$xprojectid . ' ORDER BY taskname';
	} else {
		$sql .=  ' ORDER BY taskname';
    }
//echo $sql;
    $result = db_query($sql);
    $data = array();
	$data[0] = 'none';
    while($row = db_fetch_array($result)) {
    	$taskid = $row['taskid'];
        $data[$taskid] = $row['taskname'] ;
    }
    return $data;
}
 ?>