<?php

function xtasks_init() {
    // We have to perform a load in order to assure that the ajax/javascript bits are present.
    
    drupal_add_css(drupal_get_path('module', 'xproject'). '/theme/xtasks.css');
    drupal_add_js(drupal_get_path('module', 'xproject'). '/js/xtasks.js');
}

function xtasks_menu() {
    $items = array();
/*
    $items['xtasks/%xtask/xproject'] = array(
    	'title' => 'View Project',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('node_form', 1),
        'access arguments' => array('create tasks'),
    );
*/
    $items['node/%xproject_node/tasks/%/edit'] = array(
    	'title' => 'Edit Task',
    	'type' => MENU_CALLBACK,
    	'weight' => 10,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1, false, 3),
        'access arguments' => array('create tasks'),
    );
    $items['node/%xproject_node/tasks/%/delete'] = array(
    	'title' => 'Delete Task',
    	'type' => MENU_CALLBACK,
    	'weight' => 20,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_confirm_form', 3),
        'access arguments' => array('create tasks'),
    );
	$items['node/%xproject_node/tasklist'] = array(
    	'title' => 'Task List',
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 10,
    	'page callback' => 'xtasks_page',
        'page arguments' => array(1),
        'access arguments' => array('xproject administration'),
    );
	$items['node/%xproject_node/addtask'] = array(
    	'title' => 'Task List',
    	'type' => MENU_CALLBACK,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1),
        'access arguments' => array('create tasks'),
    );
	$items['node/%xproject_node/addtask/%'] = array(
    	'title' => 'Task List',
    	'type' => MENU_CALLBACK,
    	'page callback' => 'drupal_get_form',
        'page arguments' => array('xtasks_form', 1, false, 3),
        'access arguments' => array('create tasks'),
    );

    $items['xtasks'] = array(
		'page callback' => 'xtasks_page',
		'access arguments' => array('create tasks'),
		'title' =>'Tasks',
		'type' => MENU_NORMAL_ITEM ,
		'weight' => 10
	);
	
    return $items;
}
function xtask_node_load($tid) {

	if (is_numeric($tid)) {
		$node = get_task_detail($tid);
            return $node;
        }
	return FALSE;
}
function xtasks_perm() {
    return array(
        'create tasks' => array(
          'title' => t('create project tasks'), 
          'description' => t('Permission to create tasks'),
        ),
      );
}


function xtasks_form($form_state, $projectinfo, $taskid = 0, $parentid = 0) {

    $form['xprojectid'] = array('#type' => 'hidden', '#value' => $projectinfo->nid);
    
    if($taskid == true) {
        $data = get_task_detail($taskid);
        $form['taskid'] = array(
            '#type' => 'hidden', 
            '#value' => $taskid,
        );
    }
    
    $form['taskname'] = array(
        '#type' => 'textfield', 
        '#title' => t('Task'),
        '#default_value' => $data['taskname'], 
        '#required' => TRUE,
    );
    
    $form['taskdetails'] = array(
        '#type' => 'textarea', 
        '#title' => 'Task Details', 
        '#default_value' => $data['taskdetails'], 
        '#rows' => 20, 
    );
    
    $form['taskstatus'] = array(
        '#type' => 'select', 
        '#title' => t('Status'), 
        '#default_value' => (!$taskid ? $projectinfo->projectstatus : $data['taskstatus']), 
        '#options' => array(
            'Draft' => t('Draft'), 
            'Pending' => t('Pending'), 
            'Active' => t('Active'),
            'Archived' => t('Archived'),
        ), 
        '#description' => t('Staus of task'),
        '#prefix' => '<div class="project-field-row">',
    );
    
	$form['taskprivate'] = array(
		'#type' =>'checkbox', 
		'#title' => t('Private'),
		'#default_value' => $data['taskprivate'],
        '#suffix' => '</div><div class="clear"></div>',
        '#description' => t('Private tasks cannot be viewed by anyone but the task owner. Other team members may view private tasks in public projects.'),
    );
        
	$form['parent_taskid'] = array(
        '#type' => 'select', 
        '#title' => t('Parent Task'), 
        '#options' => xtasks_get_project_tasks($projectinfo->nid),
		'#default_value' => $data['parent_taskid'], 
        '#description' => t('Select parent task'),
        '#prefix' => '<div class="project-field-row">',
        );
	$form['dependency_taskid'] = array(
        '#type' => 'select', 
        '#title' => t('Depends on task'), 
        '#options' => xtasks_get_project_tasks($projectinfo->nid),
		'#default_value' => $data['dependency_taskid'], 
        '#description' => t('Select task dependency'),
        '#suffix' => '</div><div class="clear"></div>',
        );
        
  	$form['taskimportance'] = array(
        '#type' => 'select', 
        '#title' => t('Importance'), 
        '#default_value' => (!$taskid ? $projectinfo->importance : $data['taskimportance']), 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Overall level of task importance'),
        '#prefix' => '<div class="project-field-row">',
    );
  	$form['taskpriority'] = array(
        '#type' => 'select', 
        '#title' => t('Priority'), 
        '#default_value' => (!$taskid ? $projectinfo->priority : $data['taskpriority']), 
        '#options' => array(
            1 => 1, 
            2 => 2, 
            3 => 3,
            4 => 4,
            5 => 5,
            6 => 6,
            7 => 7,
            8 => 8,
            9 => 9,
        ), 
        '#description' => t('Current priority of the task'),
        '#suffix' => '</div><div class="clear"></div>',
    );
    $form['owner'] = array(
        '#type' => 'select', 
        '#title' => t('Owner'), 
        '#options' => xcontact_get_all_contacts(),
		'#default_value' => $data['owner'], 
        '#description' => t('Select owner Contact'),
        '#prefix' => '<div class="project-field-row">',
        );
	$form['assigned_to'] = array(
        '#type' => 'select', 
        '#title' => t('Assigned to'), 
        '#options' => xcontact_get_all_contacts(),
		'#default_value' => $data['assigned_to'], 
        '#description' => t('Select owner Contact'),
        );
	$form['assigned_by'] = array(
        '#type' => 'select', 
        '#title' => t('Assigned by'), 
        '#options' => xcontact_get_all_contacts(),
		'#default_value' => $data['assigned_by'], 
        '#description' => t('Select owner Contact'),
        '#suffix' => '</div><div class="clear"></div>',
        );
        
    $form['task_hours'] = array(
        '#type' => 'fieldset',
        '#title' => t('Task Hours'),
        '#collapsible' => true,
        '#collapsed' => true,
    );
	$form['task_hours']['hours_planned'] = array(
		'#type' => 'textfield', 
		'#title' => t('Hours Planned'), 
		'#default_value' =>$data['hours_planned'] , 
		'#size' =>6 , 
		'#maxlength' => 16,
        '#prefix' => '<div class="project-field-row">', );
	$form['task_hours']['hours_spent'] = array(
		'#type' => 'textfield', 
		'#title' => t('Hours Spent'), 
		'#default_value' =>$data['hours_spent'] , 
		'#size' =>6 , 
		'#maxlength' => 16, );
	$form['task_hours']['hours_remaining'] = array(
		'#type' => 'textfield', 
		'#title' => t('Hours Remaining'), 
		'#default_value' =>$data['hours_remaining'] , 
		'#size' =>6 , 
		'#maxlength' => 16,
        '#suffix' => '</div><div class="clear"></div>', );
        
    $form['task_dates'] = array(
        '#type' => 'fieldset',
        '#title' => t('Task Dates'),
        '#collapsible' => true,
        '#collapsed' => true,
    );
	$form['task_dates']['date_approved'] = array(
		'#type' => 'date', 
		'#title' => 'Date Approved', 
		'#default_value' => $data['date_approved'], 
		'#description' => '',
        '#prefix' => '<div class="project-field-row">', );
	$form['task_dates']['planned_start_date'] = array(
		'#type' => 'date', 
		'#title' => 'Planned Start Date', 
		'#default_value' => $data['planned_start_date'], 
		'#description' => '', );
	$form['task_dates']['planned_end_date'] = array(
		'#type' => 'date', 
		'#title' => 'Planned End Date', 
		'#default_value' => $data['planned_end_date'], 
		'#description' => '', );
	$form['task_dates']['actual_start_date'] = array(
		'#type' => 'date', 
		'#title' => 'Actual Start Date', 
		'#default_value' => $data['actual_start_date'], 
		'#description' => '', );
	$form['task_dates']['actual_end_date'] = array(
		'#type' => 'date', 
		'#title' => 'Actual End Date', 
		'#default_value' => $data['actual_end_date'], 
		'#description' => '',
        '#suffix' => '</div><div class="clear"></div>', );		
 
 
    $form['submit'] = array(
        '#type' => 'submit', 
        '#value' => t('Save')
    );

    return $form;
}

function xtasks_form_submit($form, &$form_state) {

    $form_state['values']['planned_start_date'] = xproject_convert_date2string($form_state['values']['planned_start_date']);
    $form_state['values']['planned_end_date'] = xproject_convert_date2string($form_state['values']['planned_end_date']);
    $form_state['values']['actual_start_date'] = xproject_convert_date2string($form_state['values']['actual_start_date']);
    $form_state['values']['actual_end_date'] = xproject_convert_date2string($form_state['values']['actual_end_date']);
    $form_state['values']['date_approved'] = xproject_convert_date2string($form_state['values']['date_approved']); 
    if(isset($form_state['values']['taskid'])) {
		drupal_write_record('xtasks', $form_state['values'],'taskid');
		drupal_set_message('Task updated');
    } else {
		drupal_write_record('xtasks', $form_state['values']);
    	drupal_set_message('A new task added');
	}
    
    // trigger updates
    $teamlist = xteam_get_all_contacts($format = 'companies', $projectid = 0);
}

function get_task_detail($taskid)
{
    $sql = 'SELECT * FROM xtasks where taskid = '.$taskid;
    $result = db_query($sql);
    if($row = db_fetch_array($result)) {
        $row['date_approved'] = xproject_convert_date2array($row['date_approved']);
        $row['planned_start_date'] = xproject_convert_date2array($row['planned_start_date']);
        $row['planned_end_date'] = xproject_convert_date2array($row['planned_end_date']);
        $row['actual_start_date'] = xproject_convert_date2array($row['actual_start_date']);
        $row['actual_end_date'] = xproject_convert_date2array($row['actual_end_date']);
    	return $row;
    }
}

/**
 * Implementation of hook_theme().
 */
function xtasks_theme() 
{
    $path = drupal_get_path('module', 'xproject');
    return array(
        'tasklist' => array(
            'template' => 'tasklist',
            'arguments' => array('tasklist' => false, 'newtasklink' => false),
            'path' => "$path/theme",
        ),
    );
}

function xtasks_page($projectinfo)
{
    
    $current_url = drupal_get_path_alias($_GET['q']);
    
    $sql = "SELECT * FROM xtasks WHERE xprojectid = %d ORDER BY taskname";
    $result = db_query($sql, $projectinfo->nid);
    $tasklist = array();

    while($taskinfo = db_fetch_array($result)) {   

		$taskinfo['worklog_div'] = 'workloglist'.$taskinfo['taskid'];

        $edit_url = 'node/' . $projectinfo->nid . '/tasks/' . $taskinfo['taskid'] . '/edit';
        $taskinfo['editlink'] = l('Edit',$edit_url, array(
                'attributes' => array(
                    'class' => 'edittask',
                    'title' => $taskinfo['worklog_div'],
                 ),
                'query' => array(
                  'destination' => $current_url
                 )
            	 
              ));
        
        $delete_url = 'node/' . $projectinfo->nid . '/tasks/' . $taskinfo['taskid'] . '/delete';
        $taskinfo['deletelink'] = l('Delete',$delete_url, array(
                'attributes' => array(
                    'class' => 'deletetask',
                    'title' => $taskinfo['worklog_div'],
                 ),
                'query' => array(
                    'destination' => $current_url
                 )
            	 
              ));
          
        $newtask_url = 'node/' . $projectinfo->nid . '/addtask/' . $taskinfo['taskid'];
        $taskinfo['newtasklink'] = l('Sub-Task',$newtask_url, array(
                    'attributes' => array(
                        'class' => 'newtask',
    					'title' => $taskinfo['worklog_div'],
                    ),
                    'query' => array(
                        'destination' => $current_url,
                    ),
                ));
          
        $worklog_url = 'node/' . $projectinfo->nid . '/worklog/' . $taskinfo['taskid'];
        $taskinfo['workloglink'] = l('Worklog',$worklog_url, array(
                    'attributes' => array(
                        'class' => 'worklog',
    					'title' => $taskinfo['worklog_div'],
                    ),
                    'query' => array(
                        'destination' => $current_url,
                    ),
                ));
                
        $tasklist[$taskinfo['taskid']] = $taskinfo;
        
    }
          
    $newtask_url = 'node/' . arg(1) . '/addtask';
    $newtasklink = l('New Task',$newtask_url, array(
            'attributes' => array(
                'class' => 'newtasklink',
                'title' => 'taskform',
            ),
            'query' => array(
                'destination' => $current_url,
            ),
        ));
        
    return theme('tasklist', $tasklist, $newtasklink);
}

function xtasks_confirm_form(){
    return confirm_form(array(),'Are you sure you want to delete this task?',isset($_GET['destination']) ? $_GET['destination'] : "","Confirm if you want to delete this task?");
}

function xtasks_confirm_form_submit(){
    if(arg(0) == 'xtasks' && arg(2) == 'delete'){
    	$sql = 'DELETE FROM xtasks where taskid = '.arg(1);
    	$result = db_query($sql);
    	if($result) {
    		drupal_set_message('deleted task');
    	} else {
    		drupal_set_message('Error deleting task','error');
        }
    }
}

function xtasks_get_project_tasks($xprojectid) {
	$sql='SELECT taskid, taskname FROM xtasks';
	if($xprojectid)
		$sql .= ' WHERE xprojectid = ' .	$xprojectid . ' ORDER BY taskname';
	else
		$sql .=  ' ORDER BY taskname';
        echo $sql;
    $result = db_query($sql);
    $data = array();
	$data[0] = 'none';
    while($row = db_fetch_array($result)) {
	$taskid = $row['taskid'];
        $data[$taskid] = $row['taskname'] ;
    }
    return $data;
}
 ?>